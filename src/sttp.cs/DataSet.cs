//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class DataSet : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal DataSet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DataSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DataSet() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_DataSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DataSet() : this(CommonPINVOKE.new_DataSet(), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataTable Table(string tableName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataSet_Table(swigCPtr, tableName);
    DataTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataTable(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataTable CreateTable(string name) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataSet_CreateTable(swigCPtr, name);
    DataTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataTable(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int _TableCount() {
    int ret = CommonPINVOKE.DataSet__TableCount(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private StringCollection _TableNames() {
    StringCollection ret = new StringCollection(CommonPINVOKE.DataSet__TableNames(swigCPtr), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private DataTableCollection _Tables() {
    DataTableCollection ret = new DataTableCollection(CommonPINVOKE.DataSet__Tables(swigCPtr), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool AddOrUpdateTable(DataTable table) {
    bool ret = CommonPINVOKE.DataSet_AddOrUpdateTable(swigCPtr, DataTable.getCPtr(table));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveTable(string tableName) {
    bool ret = CommonPINVOKE.DataSet_RemoveTable(swigCPtr, tableName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ReadXml(string fileName) {
    CommonPINVOKE.DataSet_ReadXml__SWIG_0(swigCPtr, fileName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ReadXml(ByteBuffer buffer) {
    CommonPINVOKE.DataSet_ReadXml__SWIG_1(swigCPtr, ByteBuffer.getCPtr(buffer));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public unsafe void ReadXml(byte[] buffer, uint length) {
    fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      CommonPINVOKE.DataSet_ReadXml__SWIG_2(swigCPtr, (global::System.IntPtr)swig_ptrTo_buffer, length);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
    }
  }

  public void WriteXml(string fileName, string dataSetName) {
    CommonPINVOKE.DataSet_WriteXml__SWIG_0(swigCPtr, fileName, dataSetName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WriteXml(string fileName) {
    CommonPINVOKE.DataSet_WriteXml__SWIG_1(swigCPtr, fileName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WriteXml(ByteBuffer buffer, string dataSetName) {
    CommonPINVOKE.DataSet_WriteXml__SWIG_2(swigCPtr, ByteBuffer.getCPtr(buffer), dataSetName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WriteXml(ByteBuffer buffer) {
    CommonPINVOKE.DataSet_WriteXml__SWIG_3(swigCPtr, ByteBuffer.getCPtr(buffer));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public static DataSet FromXml(string fileName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataSet_FromXml__SWIG_0(fileName);
    DataSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataSet(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DataSet FromXml(ByteBuffer buffer) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataSet_FromXml__SWIG_1(ByteBuffer.getCPtr(buffer));
    DataSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataSet(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe static DataSet FromXml(byte[] buffer, uint length) {
    fixed ( byte* swig_ptrTo_buffer = buffer ) {
    {
      global::System.IntPtr cPtr = CommonPINVOKE.DataSet_FromXml__SWIG_2((global::System.IntPtr)swig_ptrTo_buffer, length);
      DataSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataSet(cPtr, true);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }
  }

  public static string XmlSchemaNamespace {
    get {
      string ret = CommonPINVOKE.DataSet_XmlSchemaNamespace_get();
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string ExtXmlSchemaDataNamespace {
    get {
      string ret = CommonPINVOKE.DataSet_ExtXmlSchemaDataNamespace_get();
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

        public int TableCount => _TableCount();

        public StringCollection TableNames => _TableNames();

        public DataTableCollection Tables => _Tables();

        public DataTable this[string tableName] => Table(tableName);
    
}

}

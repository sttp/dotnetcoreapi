//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class Common {
  internal unsafe static void GetGuidBytes(guid_t value, byte[] data) {
    fixed ( byte* swig_ptrTo_data = data ) {
    {
      CommonPINVOKE.GetGuidBytes(guid_t.getCPtr(value), (global::System.IntPtr)swig_ptrTo_data);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
    }
  }

  public static string GetSubscriberConnectionIPAddress(SubscriberConnection connection) {
    string ret = CommonPINVOKE.GetSubscriberConnectionIPAddress(SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static decimal_t ParseDecimal(string value) {
    decimal_t ret = new decimal_t(CommonPINVOKE.ParseDecimal(value), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static string ToString(decimal_t value) {
    string ret = CommonPINVOKE.ToString(decimal_t.getCPtr(value));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal unsafe static guid_t ParseGuid(byte[] data, bool swapEndianness) {
    fixed ( byte* swig_ptrTo_data = data ) {
    {
      guid_t ret = new guid_t(CommonPINVOKE.ParseGuid((global::System.IntPtr)swig_ptrTo_data, swapEndianness), true);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
    }
  }

  internal static datetime_t FromTicks(long ticks) {
    datetime_t ret = new datetime_t(CommonPINVOKE.FromTicks(ticks), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  internal static long ToTicks(datetime_t time) {
    long ret = CommonPINVOKE.ToTicks(datetime_t.getCPtr(time));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetSignalTypeAcronym(SignalKind kind, char phasorType) {
    string ret = CommonPINVOKE.GetSignalTypeAcronym__SWIG_0((int)kind, phasorType);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetSignalTypeAcronym(SignalKind kind) {
    string ret = CommonPINVOKE.GetSignalTypeAcronym__SWIG_1((int)kind);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetEngineeringUnits(string signalType) {
    string ret = CommonPINVOKE.GetEngineeringUnits(signalType);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetProtocolType(string protocolName) {
    string ret = CommonPINVOKE.GetProtocolType(protocolName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SignalKind ParseSignalKind(string acronym) {
    SignalKind ret = (SignalKind)CommonPINVOKE.ParseSignalKind(acronym);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}

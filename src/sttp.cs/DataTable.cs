//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class DataTable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal DataTable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DataTable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DataTable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_DataTable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DataTable(DataSet parent, string name) : this(CommonPINVOKE.new_DataTable(DataSet.getCPtr(parent), name), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private DataSet _Parent() {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable__Parent(swigCPtr);
    DataSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataSet(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private string _Name() {
    string ret = CommonPINVOKE.DataTable__Name(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddColumn(DataColumn column) {
    CommonPINVOKE.DataTable_AddColumn(swigCPtr, DataColumn.getCPtr(column));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataColumn Column(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_Column__SWIG_0(swigCPtr, columnName);
    DataColumn ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataColumn(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataColumn Column(int index) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_Column__SWIG_1(swigCPtr, index);
    DataColumn ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataColumn(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataColumn CreateColumn(string name, DataType type, string expression) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_CreateColumn__SWIG_0(swigCPtr, name, (int)type, expression);
    DataColumn ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataColumn(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataColumn CreateColumn(string name, DataType type) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_CreateColumn__SWIG_1(swigCPtr, name, (int)type);
    DataColumn ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataColumn(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataColumn CloneColumn(DataColumn source) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_CloneColumn(swigCPtr, DataColumn.getCPtr(source));
    DataColumn ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataColumn(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int _ColumnCount() {
    int ret = CommonPINVOKE.DataTable__ColumnCount(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataRow Row(int index) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_Row(swigCPtr, index);
    DataRow ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataRow(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddRow(DataRow row) {
    CommonPINVOKE.DataTable_AddRow(swigCPtr, DataRow.getCPtr(row));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataRow CreateRow() {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_CreateRow(swigCPtr);
    DataRow ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataRow(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataRow CloneRow(DataRow source) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataTable_CloneRow(swigCPtr, DataRow.getCPtr(source));
    DataRow ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataRow(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int _RowCount() {
    int ret = CommonPINVOKE.DataTable__RowCount(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

        public DataSet Parent => _Parent();

        public string Name => _Name();

        public int ColumntCount => _ColumnCount();

        public int RowCount => _RowCount();

        public DataColumn this[int index] => Column(index);

        public DataColumn this[string columnName] => Column(columnName);
    
}

}

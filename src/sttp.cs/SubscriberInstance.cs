//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class SubscriberInstance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal SubscriberInstance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubscriberInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubscriberInstance() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_SubscriberInstance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  protected virtual void SetupSubscriberConnector(SubscriberConnector connector) {
    CommonPINVOKE.SubscriberInstance_SetupSubscriberConnector(swigCPtr, SubscriberConnector.getCPtr(connector));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual SubscriptionInfo CreateSubscriptionInfo() {
    SubscriptionInfo ret = new SubscriptionInfo(CommonPINVOKE.SubscriberInstance_CreateSubscriptionInfo(swigCPtr), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual void StatusMessage(string message) {
    CommonPINVOKE.SubscriberInstance_StatusMessage(swigCPtr, message);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ErrorMessage(string message) {
    CommonPINVOKE.SubscriberInstance_ErrorMessage(swigCPtr, message);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void DataStartTime(System.DateTime startTime) {
    datetime_t tempstartTime = Common.FromTicks(startTime.Ticks);
    {
      CommonPINVOKE.SubscriberInstance_DataStartTime(swigCPtr, datetime_t.getCPtr(tempstartTime));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  protected virtual void ReceivedMetadata(ByteBuffer payload) {
    CommonPINVOKE.SubscriberInstance_ReceivedMetadata(swigCPtr, ByteBuffer.getCPtr(payload));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ParsedMetadata() {
    CommonPINVOKE.SubscriberInstance_ParsedMetadata(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ReceivedNewMeasurements(MeasurementCollection measurements) {
    CommonPINVOKE.SubscriberInstance_ReceivedNewMeasurements(swigCPtr, MeasurementCollection.getCPtr(measurements));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ConfigurationChanged() {
    CommonPINVOKE.SubscriberInstance_ConfigurationChanged(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void HistoricalReadComplete() {
    CommonPINVOKE.SubscriberInstance_HistoricalReadComplete(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ConnectionEstablished() {
    CommonPINVOKE.SubscriberInstance_ConnectionEstablished(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ConnectionTerminated() {
    CommonPINVOKE.SubscriberInstance_ConnectionTerminated(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected SubscriberInstance() : this(CommonPINVOKE.new_SubscriberInstance(), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string hostname, ushort port, ushort udpPort) {
    CommonPINVOKE.SubscriberInstance_Initialize__SWIG_0(swigCPtr, hostname, port, udpPort);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string hostname, ushort port) {
    CommonPINVOKE.SubscriberInstance_Initialize__SWIG_1(swigCPtr, hostname, port);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public System.Guid GetSubscriberID() {
      global::System.IntPtr cPtr = CommonPINVOKE.SubscriberInstance_GetSubscriberID(swigCPtr);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      using (guid_t tempGuid = (cPtr == global::System.IntPtr.Zero) ? null : new guid_t(cPtr, false)) {
        byte[] data = new byte[16];
        Common.GetGuidBytes(tempGuid, data);
        return new System.Guid(data);
      }
    }

  private bool GetAutoReconnect() {
    bool ret = CommonPINVOKE.SubscriberInstance_GetAutoReconnect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAutoReconnect(bool autoReconnect) {
    CommonPINVOKE.SubscriberInstance_SetAutoReconnect(swigCPtr, autoReconnect);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool GetAutoParseMetadata() {
    bool ret = CommonPINVOKE.SubscriberInstance_GetAutoParseMetadata(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAutoParseMetadata(bool autoParseMetadata) {
    CommonPINVOKE.SubscriberInstance_SetAutoParseMetadata(swigCPtr, autoParseMetadata);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private short GetMaxRetries() {
    short ret = CommonPINVOKE.SubscriberInstance_GetMaxRetries(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMaxRetries(short maxRetries) {
    CommonPINVOKE.SubscriberInstance_SetMaxRetries(swigCPtr, maxRetries);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private short GetRetryInterval() {
    short ret = CommonPINVOKE.SubscriberInstance_GetRetryInterval(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetRetryInterval(short retryInterval) {
    CommonPINVOKE.SubscriberInstance_SetRetryInterval(swigCPtr, retryInterval);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private string GetFilterExpression() {
    string ret = CommonPINVOKE.SubscriberInstance_GetFilterExpression(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetFilterExpression(string filterExpression) {
    CommonPINVOKE.SubscriberInstance_SetFilterExpression(swigCPtr, filterExpression);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private string GetMetadataFilters() {
    string ret = CommonPINVOKE.SubscriberInstance_GetMetadataFilters(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMetadataFilters(string metadataFilters) {
    CommonPINVOKE.SubscriberInstance_SetMetadataFilters(swigCPtr, metadataFilters);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Connect() {
    CommonPINVOKE.SubscriberInstance_Connect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConnectAsync() {
    CommonPINVOKE.SubscriberInstance_ConnectAsync(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Disconnect() {
    CommonPINVOKE.SubscriberInstance_Disconnect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EstablishHistoricalRead(string startTime, string stopTime) {
    CommonPINVOKE.SubscriberInstance_EstablishHistoricalRead(swigCPtr, startTime, stopTime);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetHistoricalReplayInterval(int replayInterval) {
    CommonPINVOKE.SubscriberInstance_SetHistoricalReplayInterval(swigCPtr, replayInterval);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsPayloadDataCompressed() {
    bool ret = CommonPINVOKE.SubscriberInstance_IsPayloadDataCompressed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetPayloadDataCompressed(bool compressed) {
    CommonPINVOKE.SubscriberInstance_SetPayloadDataCompressed(swigCPtr, compressed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsMetadataCompressed() {
    bool ret = CommonPINVOKE.SubscriberInstance_IsMetadataCompressed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMetadataCompressed(bool compressed) {
    CommonPINVOKE.SubscriberInstance_SetMetadataCompressed(swigCPtr, compressed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsSignalIndexCacheCompressed() {
    bool ret = CommonPINVOKE.SubscriberInstance_IsSignalIndexCacheCompressed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetSignalIndexCacheCompressed(bool compressed) {
    CommonPINVOKE.SubscriberInstance_SetSignalIndexCacheCompressed(swigCPtr, compressed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong GetTotalCommandChannelBytesReceived() {
    ulong ret = CommonPINVOKE.SubscriberInstance_GetTotalCommandChannelBytesReceived(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalDataChannelBytesReceived() {
    ulong ret = CommonPINVOKE.SubscriberInstance_GetTotalDataChannelBytesReceived(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalMeasurementsReceived() {
    ulong ret = CommonPINVOKE.SubscriberInstance_GetTotalMeasurementsReceived(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConnected() {
    bool ret = CommonPINVOKE.SubscriberInstance_IsConnected(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsSubscribed() {
    bool ret = CommonPINVOKE.SubscriberInstance_IsSubscribed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TryGetDeviceAcronyms(StringCollection deviceAcronyms) {
    bool ret = CommonPINVOKE.SubscriberInstance_TryGetDeviceAcronyms(swigCPtr, StringCollection.getCPtr(deviceAcronyms));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetParsedDeviceMetadata(DeviceMap devices) {
    CommonPINVOKE.SubscriberInstance_GetParsedDeviceMetadata(swigCPtr, DeviceMap.getCPtr(devices));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetParsedMeasurementMetadata(MeasurementMap measurements) {
    CommonPINVOKE.SubscriberInstance_GetParsedMeasurementMetadata(swigCPtr, MeasurementMap.getCPtr(measurements));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool TryGetDeviceMetadata(string deviceAcronym, DeviceMetadata deviceMetadata) {
    bool ret = CommonPINVOKE.SubscriberInstance_TryGetDeviceMetadata(swigCPtr, deviceAcronym, DeviceMetadata.getCPtr(deviceMetadata));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TryGetMeasurementMetdata(System.Guid signalID, MeasurementMetadata measurementMetadata) {
    guid_t tempsignalID = Common.ParseGuid(signalID.ToByteArray(), true);
    {
      bool ret = CommonPINVOKE.SubscriberInstance_TryGetMeasurementMetdata(swigCPtr, guid_t.getCPtr(tempsignalID), MeasurementMetadata.getCPtr(measurementMetadata));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public bool TryGetConfigurationFrame(string deviceAcronym, ConfigurationFrame configurationFrame) {
    bool ret = CommonPINVOKE.SubscriberInstance_TryGetConfigurationFrame(swigCPtr, deviceAcronym, ConfigurationFrame.getCPtr(configurationFrame));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TryFindTargetConfigurationFrame(System.Guid signalID, ConfigurationFrame targetFrame) {
    guid_t tempsignalID = Common.ParseGuid(signalID.ToByteArray(), true);
    {
      bool ret = CommonPINVOKE.SubscriberInstance_TryFindTargetConfigurationFrame(swigCPtr, guid_t.getCPtr(tempsignalID), ConfigurationFrame.getCPtr(targetFrame));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static bool TryGetMeasurementMetdataFromConfigurationFrame(System.Guid signalID, ConfigurationFrame sourceFrame, MeasurementMetadata measurementMetadata) {
    guid_t tempsignalID = Common.ParseGuid(signalID.ToByteArray(), true);
    {
      bool ret = CommonPINVOKE.SubscriberInstance_TryGetMeasurementMetdataFromConfigurationFrame(guid_t.getCPtr(tempsignalID), ConfigurationFrame.getCPtr(sourceFrame), MeasurementMetadata.getCPtr(measurementMetadata));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

        public void EstablishHistoricalRead(System.DateTime startTime, System.DateTime stopTime) => EstablishHistoricalRead($"{startTime:yyyy-MM-dd HH:mm:ss.fff}", $"{stopTime:yyyy-MM-dd HH:mm:ss.fff}");

        // Gets or sets flag that determines if auto-reconnect is enabled.
        public bool AutoReconnect
        {
          get => GetAutoReconnect();
          set => SetAutoReconnect(value);
        }

        // Gets or sets flag that determines if metadata should be automatically
        // parsed. When true, metadata will be requested upon connection before
        // subscription; otherwise, metadata will not be manually requested and
        // subscribe will happen upon connection.
        public bool AutoParseMetadata
        {
          get => GetAutoParseMetadata();
          set => SetAutoParseMetadata(value);
        }

        // Gets or sets maximum connection retries.
        public short MaxRetries
        {
          get => GetMaxRetries();
          set => SetMaxRetries(value);
        }

        // Gets or sets the initial interval of idle time (in milliseconds) between connection attempts.
        public short RetryInterval
        {
          get => GetRetryInterval();
          set => SetRetryInterval(value);
        }

        // Gets or sets a filter expression to control which points to receive. The filter expression
        // defaults to all non-static points available. When specified before the Connect function,
        // this filter expression will be used for the initial connection. Updating the filter
        // expression while a subscription is active will cause a resubscribe with new expression.
        public string FilterExpression
        {
          get => GetFilterExpression();
          set => SetFilterExpression(value);
        }

        // Gets or sets any metadata filters to be applied to incoming metadata. Each separate filter
        // should be separated by semi-colons.
        public string MetadataFilters
        {
          get => GetMetadataFilters();
          set => SetMetadataFilters(value);
        }

        // Gets or sets value that determines whether payload data is compressed using TSSC.
        public bool PayloadDataCompressed
        {
          get => IsPayloadDataCompressed();
          set => SetPayloadDataCompressed(value);
        }

        // Gets or sets value that determines whether the metadata transfer is compressed using GZip.
        public bool MetadataCompressed
        {
          get => IsMetadataCompressed();
          set => SetMetadataCompressed(value);
        }

        // Gets or sets flag that determines whether the signal index cache is compressed using GZip.
        public bool SignalIndexCacheCompressed
        {
          get => IsSignalIndexCacheCompressed();
          set => SetSignalIndexCacheCompressed(value);
        }
    
  public static readonly string SubscribeAllExpression = CommonPINVOKE.SubscriberInstance_SubscribeAllExpression_get();
  public static readonly string SubscribeAllNoStatsExpression = CommonPINVOKE.SubscriberInstance_SubscribeAllNoStatsExpression_get();
  public static readonly string FilterMetadataStatsExpression = CommonPINVOKE.SubscriberInstance_FilterMetadataStatsExpression_get();
}

}

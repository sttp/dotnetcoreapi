//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class PublisherInstance : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal PublisherInstance(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PublisherInstance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PublisherInstance() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_PublisherInstance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  protected virtual void StatusMessage(string message) {
    CommonPINVOKE.PublisherInstance_StatusMessage(swigCPtr, message);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ErrorMessage(string message) {
    CommonPINVOKE.PublisherInstance_ErrorMessage(swigCPtr, message);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ClientConnected(SubscriberConnection connection) {
    CommonPINVOKE.PublisherInstance_ClientConnected(swigCPtr, SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ClientDisconnected(SubscriberConnection connection) {
    CommonPINVOKE.PublisherInstance_ClientDisconnected(swigCPtr, SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ProcessingIntervalChangeRequested(SubscriberConnection connection) {
    CommonPINVOKE.PublisherInstance_ProcessingIntervalChangeRequested(swigCPtr, SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void TemporalSubscriptionRequested(SubscriberConnection connection) {
    CommonPINVOKE.PublisherInstance_TemporalSubscriptionRequested(swigCPtr, SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void TemporalSubscriptionCanceled(SubscriberConnection connection) {
    CommonPINVOKE.PublisherInstance_TemporalSubscriptionCanceled(swigCPtr, SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void HandleUserCommand(SubscriberConnection connection, uint command, ByteBuffer buffer) {
    CommonPINVOKE.PublisherInstance_HandleUserCommand(swigCPtr, SubscriberConnection.getCPtr(connection), command, ByteBuffer.getCPtr(buffer));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected PublisherInstance() : this(CommonPINVOKE.new_PublisherInstance(), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DefineMetadata(DeviceMetadataCollection deviceMetadata, MeasurementMetadataCollection measurementMetadata, PhasorMetadataCollection phasorMetadata, int versionNumber) {
    CommonPINVOKE.PublisherInstance_DefineMetadata__SWIG_0(swigCPtr, DeviceMetadataCollection.getCPtr(deviceMetadata), MeasurementMetadataCollection.getCPtr(measurementMetadata), PhasorMetadataCollection.getCPtr(phasorMetadata), versionNumber);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DefineMetadata(DeviceMetadataCollection deviceMetadata, MeasurementMetadataCollection measurementMetadata, PhasorMetadataCollection phasorMetadata) {
    CommonPINVOKE.PublisherInstance_DefineMetadata__SWIG_1(swigCPtr, DeviceMetadataCollection.getCPtr(deviceMetadata), MeasurementMetadataCollection.getCPtr(measurementMetadata), PhasorMetadataCollection.getCPtr(phasorMetadata));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DefineMetadata(DataSet metadata) {
    CommonPINVOKE.PublisherInstance_DefineMetadata__SWIG_2(swigCPtr, DataSet.getCPtr(metadata));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataSet GetMetadata() {
    global::System.IntPtr cPtr = CommonPINVOKE.PublisherInstance_GetMetadata(swigCPtr);
    DataSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataSet(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public DataSet GetFilteringMetadata() {
    global::System.IntPtr cPtr = CommonPINVOKE.PublisherInstance_GetFilteringMetadata(swigCPtr);
    DataSet ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataSet(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MeasurementMetadataCollection FilterMetadata(string filterExpression) {
    MeasurementMetadataCollection ret = new MeasurementMetadataCollection(CommonPINVOKE.PublisherInstance_FilterMetadata(swigCPtr, filterExpression), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Start(ushort port, bool ipV6) {
    bool ret = CommonPINVOKE.PublisherInstance_Start__SWIG_0(swigCPtr, port, ipV6);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Start(ushort port) {
    bool ret = CommonPINVOKE.PublisherInstance_Start__SWIG_1(swigCPtr, port);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Start(string networkInterfaceIP, ushort port) {
    bool ret = CommonPINVOKE.PublisherInstance_Start__SWIG_2(swigCPtr, networkInterfaceIP, port);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Stop() {
    CommonPINVOKE.PublisherInstance_Stop(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsStarted() {
    bool ret = CommonPINVOKE.PublisherInstance_IsStarted(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void PublishMeasurements(MeasurementCollection measurements) {
    CommonPINVOKE.PublisherInstance_PublishMeasurements(swigCPtr, MeasurementCollection.getCPtr(measurements));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private System.Guid GetNodeID() {
      global::System.IntPtr cPtr = CommonPINVOKE.PublisherInstance_GetNodeID(swigCPtr);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      using (guid_t tempGuid = (cPtr == global::System.IntPtr.Zero) ? null : new guid_t(cPtr, false)) {
        byte[] data = new byte[16];
        Common.GetGuidBytes(tempGuid, data);
        return new System.Guid(data);
      }
    }

  private void SetNodeID(System.Guid nodeID) {
    guid_t tempnodeID = Common.ParseGuid(nodeID.ToByteArray(), true);
    {
      CommonPINVOKE.PublisherInstance_SetNodeID(swigCPtr, guid_t.getCPtr(tempnodeID));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  private SecurityMode GetSecurityMode() {
    SecurityMode ret = (SecurityMode)CommonPINVOKE.PublisherInstance_GetSecurityMode(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetSecurityMode(SecurityMode securityMode) {
    CommonPINVOKE.PublisherInstance_SetSecurityMode(swigCPtr, (int)securityMode);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private int GetMaximumAllowedConnections() {
    int ret = CommonPINVOKE.PublisherInstance_GetMaximumAllowedConnections(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMaximumAllowedConnections(int value) {
    CommonPINVOKE.PublisherInstance_SetMaximumAllowedConnections(swigCPtr, value);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsMetadataRefreshAllowed() {
    bool ret = CommonPINVOKE.PublisherInstance_IsMetadataRefreshAllowed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMetadataRefreshAllowed(bool allowed) {
    CommonPINVOKE.PublisherInstance_SetMetadataRefreshAllowed(swigCPtr, allowed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsNaNValueFilterAllowed() {
    bool ret = CommonPINVOKE.PublisherInstance_IsNaNValueFilterAllowed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetNaNValueFilterAllowed(bool allowed) {
    CommonPINVOKE.PublisherInstance_SetNaNValueFilterAllowed(swigCPtr, allowed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsNaNValueFilterForced() {
    bool ret = CommonPINVOKE.PublisherInstance_IsNaNValueFilterForced(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetNaNValueFilterForced(bool forced) {
    CommonPINVOKE.PublisherInstance_SetNaNValueFilterForced(swigCPtr, forced);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool GetSupportsTemporalSubscriptions() {
    bool ret = CommonPINVOKE.PublisherInstance_GetSupportsTemporalSubscriptions(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetSupportsTemporalSubscriptions(bool value) {
    CommonPINVOKE.PublisherInstance_SetSupportsTemporalSubscriptions(swigCPtr, value);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private uint GetCipherKeyRotationPeriod() {
    uint ret = CommonPINVOKE.PublisherInstance_GetCipherKeyRotationPeriod(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetCipherKeyRotationPeriod(uint period) {
    CommonPINVOKE.PublisherInstance_SetCipherKeyRotationPeriod(swigCPtr, period);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ushort GetPort() {
    ushort ret = CommonPINVOKE.PublisherInstance_GetPort(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsIPv6() {
    bool ret = CommonPINVOKE.PublisherInstance_IsIPv6(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalCommandChannelBytesSent() {
    ulong ret = CommonPINVOKE.PublisherInstance_GetTotalCommandChannelBytesSent(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalDataChannelBytesSent() {
    ulong ret = CommonPINVOKE.PublisherInstance_GetTotalDataChannelBytesSent(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalMeasurementsSent() {
    ulong ret = CommonPINVOKE.PublisherInstance_GetTotalMeasurementsSent(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TryGetSubscriberConnections(SubscriberConnectionCollection subscriberConnections) {
    bool ret = CommonPINVOKE.PublisherInstance_TryGetSubscriberConnections(swigCPtr, SubscriberConnectionCollection.getCPtr(subscriberConnections));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DisconnectSubscriber(SubscriberConnection connection) {
    CommonPINVOKE.PublisherInstance_DisconnectSubscriber__SWIG_0(swigCPtr, SubscriberConnection.getCPtr(connection));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void DisconnectSubscriber(System.Guid instanceID) {
    guid_t tempinstanceID = Common.ParseGuid(instanceID.ToByteArray(), true);
    {
      CommonPINVOKE.PublisherInstance_DisconnectSubscriber__SWIG_1(swigCPtr, guid_t.getCPtr(tempinstanceID));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

        // Gets or sets node ID that defines a unique identification for the publisher
        // instance that gets included in published metadata so that clients can easily
        // distinguish the source of the measurements
        public System.Guid NodeID
        {
            get => GetNodeID();
            set => SetNodeID(value);
        }

        public SecurityMode SecurityMode
        {
            get => GetSecurityMode();
            set => SetSecurityMode(value);
        }

        public int MaximumAllowedConnections
        {
            get => GetMaximumAllowedConnections();
            set => SetMaximumAllowedConnections(value);
        }

        public bool MetadataRefreshAllowed
        {
            get => IsMetadataRefreshAllowed();
            set => SetMetadataRefreshAllowed(value);
        }

        public bool NaNValueFilterAllowed
        {
            get => IsNaNValueFilterAllowed();
            set => SetNaNValueFilterAllowed(value);
        }

        public bool NaNValueFilterForced
        {
            get => IsNaNValueFilterForced();
            set => SetNaNValueFilterForced(value);
        }

        public bool SupportsTemporalSubscriptions
        {
            get => GetSupportsTemporalSubscriptions();
            set => SetSupportsTemporalSubscriptions(value);
        }

        public uint CipherKeyRotationPeriod
        {
            get => GetCipherKeyRotationPeriod();
            set => SetCipherKeyRotationPeriod(value);
        }
    
}

}

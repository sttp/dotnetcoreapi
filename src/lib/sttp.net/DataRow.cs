//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class DataRow : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal DataRow(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DataRow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DataRow() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_DataRow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public DataRow(DataTable parent) : this(CommonPINVOKE.new_DataRow(DataTable.getCPtr(parent)), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private DataTable _Parent() {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow__Parent(swigCPtr);
    DataTable ret = (cPtr == global::System.IntPtr.Zero) ? null : new DataTable(cPtr, true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsNull(int columnIndex) {
    bool ret = CommonPINVOKE.DataRow_IsNull__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsNull(string columnName) {
    bool ret = CommonPINVOKE.DataRow_IsNull__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetNullValue(int columnIndex) {
    CommonPINVOKE.DataRow_SetNullValue__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNullValue(string columnName) {
    CommonPINVOKE.DataRow_SetNullValue__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public string ValueAsString(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsString__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableString tempString = (cPtr == global::System.IntPtr.Zero) ? null : new NullableString(cPtr, false)) {
      return tempString?.GetValueOrDefault();
    }
  }

  public string ValueAsString(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsString__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableString tempString = (cPtr == global::System.IntPtr.Zero) ? null : new NullableString(cPtr, false)) {
      return tempString?.GetValueOrDefault();
    }
  }

  public void SetStringValue(int columnIndex, string value) {
    NullableString tempvalue = new NullableString(value);
    {
      CommonPINVOKE.DataRow_SetStringValue__SWIG_0(swigCPtr, columnIndex, NullableString.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetStringValue(string columnName, string value) {
    NullableString tempvalue = new NullableString(value);
    {
      CommonPINVOKE.DataRow_SetStringValue__SWIG_1(swigCPtr, columnName, NullableString.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public bool? ValueAsBoolean(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsBoolean__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableBool tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableBool(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public bool? ValueAsBoolean(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsBoolean__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableBool tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableBool(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetBooleanValue(int columnIndex, bool? value) {
    NullableBool tempvalue = value.HasValue ? new NullableBool(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetBooleanValue__SWIG_0(swigCPtr, columnIndex, NullableBool.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetBooleanValue(string columnName, bool? value) {
    NullableBool tempvalue = value.HasValue ? new NullableBool(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetBooleanValue__SWIG_1(swigCPtr, columnName, NullableBool.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public System.DateTime? ValueAsDateTime(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsDateTime__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableDateTime tempDate = (cPtr == global::System.IntPtr.Zero) ? null : new NullableDateTime(cPtr, false)) {
      if (tempDate?.HasValue() ?? false) return new System.DateTime(Common.ToTicks(tempDate.GetValueOrDefault()));
      return null;
    }
  }

  public System.DateTime? ValueAsDateTime(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsDateTime__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableDateTime tempDate = (cPtr == global::System.IntPtr.Zero) ? null : new NullableDateTime(cPtr, false)) {
      if (tempDate?.HasValue() ?? false) return new System.DateTime(Common.ToTicks(tempDate.GetValueOrDefault()));
      return null;
    }
  }

  public void SetDateTimeValue(int columnIndex, System.DateTime? value) {
    NullableDateTime tempvalue = value.HasValue ? new NullableDateTime(Common.FromTicks(value.Value.Ticks)) : null;
    {
      CommonPINVOKE.DataRow_SetDateTimeValue__SWIG_0(swigCPtr, columnIndex, NullableDateTime.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetDateTimeValue(string columnName, System.DateTime? value) {
    NullableDateTime tempvalue = value.HasValue ? new NullableDateTime(Common.FromTicks(value.Value.Ticks)) : null;
    {
      CommonPINVOKE.DataRow_SetDateTimeValue__SWIG_1(swigCPtr, columnName, NullableDateTime.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public float? ValueAsSingle(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsSingle__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableFloat32 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableFloat32(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public float? ValueAsSingle(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsSingle__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableFloat32 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableFloat32(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetSingleValue(int columnIndex, float? value) {
    NullableFloat32 tempvalue = value.HasValue ? new NullableFloat32(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetSingleValue__SWIG_0(swigCPtr, columnIndex, NullableFloat32.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetSingleValue(string columnName, float? value) {
    NullableFloat32 tempvalue = value.HasValue ? new NullableFloat32(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetSingleValue__SWIG_1(swigCPtr, columnName, NullableFloat32.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public double? ValueAsDouble(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsDouble__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableFloat64 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableFloat64(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public double? ValueAsDouble(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsDouble__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableFloat64 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableFloat64(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetDoubleValue(int columnIndex, double? value) {
    NullableFloat64 tempvalue = value.HasValue ? new NullableFloat64(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetDoubleValue__SWIG_0(swigCPtr, columnIndex, NullableFloat64.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetDoubleValue(string columnName, double? value) {
    NullableFloat64 tempvalue = value.HasValue ? new NullableFloat64(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetDoubleValue__SWIG_1(swigCPtr, columnName, NullableFloat64.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public decimal? ValueAsDecimal(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsDecimal__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableDecimal tempDecimal = (cPtr == global::System.IntPtr.Zero) ? null : new NullableDecimal(cPtr, false)) {
      if (tempDecimal?.HasValue() ?? false) return System.Convert.ToDecimal(Common.ToString(tempDecimal.GetValueOrDefault()));
      return null;
    }
  }

  public decimal? ValueAsDecimal(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsDecimal__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableDecimal tempDecimal = (cPtr == global::System.IntPtr.Zero) ? null : new NullableDecimal(cPtr, false)) {
      if (tempDecimal?.HasValue() ?? false) return System.Convert.ToDecimal(Common.ToString(tempDecimal.GetValueOrDefault()));
      return null;
    }
  }

  public void SetDecimalValue(int columnIndex, decimal? value) {
    NullableDecimal tempvalue = value.HasValue ? new NullableDecimal(Common.ParseDecimal(value.Value.ToString())) : null;
    {
      CommonPINVOKE.DataRow_SetDecimalValue__SWIG_0(swigCPtr, columnIndex, NullableDecimal.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetDecimalValue(string columnName, decimal? value) {
    NullableDecimal tempvalue = value.HasValue ? new NullableDecimal(Common.ParseDecimal(value.Value.ToString())) : null;
    {
      CommonPINVOKE.DataRow_SetDecimalValue__SWIG_1(swigCPtr, columnName, NullableDecimal.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public System.Guid? ValueAsGuid(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsGuid__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableGuid tempGuid = (cPtr == global::System.IntPtr.Zero) ? null : new NullableGuid(cPtr, false)) {
      if (!(tempGuid?.HasValue() ?? false)) return null;
      byte[] data = new byte[16];
      Common.GetGuidBytes(tempGuid.GetValueOrDefault(), data);
      return new System.Guid(data);
    }
  }

  public System.Guid? ValueAsGuid(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsGuid__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableGuid tempGuid = (cPtr == global::System.IntPtr.Zero) ? null : new NullableGuid(cPtr, false)) {
      if (!(tempGuid?.HasValue() ?? false)) return null;
      byte[] data = new byte[16];
      Common.GetGuidBytes(tempGuid.GetValueOrDefault(), data);
      return new System.Guid(data);
    }
  }

  public void SetGuidValue(int columnIndex, System.Guid? value) {
    NullableGuid tempvalue = value.HasValue ? new NullableGuid(Common.ParseGuid(value.Value.ToByteArray(), true)) : null;
    {
      CommonPINVOKE.DataRow_SetGuidValue__SWIG_0(swigCPtr, columnIndex, NullableGuid.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetGuidValue(string columnName, System.Guid? value) {
    NullableGuid tempvalue = value.HasValue ? new NullableGuid(Common.ParseGuid(value.Value.ToByteArray(), true)) : null;
    {
      CommonPINVOKE.DataRow_SetGuidValue__SWIG_1(swigCPtr, columnName, NullableGuid.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public sbyte? ValueAsInt8(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt8__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt8 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt8(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public sbyte? ValueAsInt8(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt8__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt8 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt8(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetInt8Value(int columnIndex, sbyte? value) {
    NullableInt8 tempvalue = value.HasValue ? new NullableInt8(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt8Value__SWIG_0(swigCPtr, columnIndex, NullableInt8.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetInt8Value(string columnName, sbyte? value) {
    NullableInt8 tempvalue = value.HasValue ? new NullableInt8(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt8Value__SWIG_1(swigCPtr, columnName, NullableInt8.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public short? ValueAsInt16(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt16__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt16 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt16(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public short? ValueAsInt16(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt16__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt16 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt16(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetInt16Value(int columnIndex, short? value) {
    NullableInt16 tempvalue = value.HasValue ? new NullableInt16(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt16Value__SWIG_0(swigCPtr, columnIndex, NullableInt16.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetInt16Value(string columnName, short? value) {
    NullableInt16 tempvalue = value.HasValue ? new NullableInt16(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt16Value__SWIG_1(swigCPtr, columnName, NullableInt16.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public int? ValueAsInt32(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt32__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt32 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt32(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public int? ValueAsInt32(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt32__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt32 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt32(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetInt32Value(int columnIndex, int? value) {
    NullableInt32 tempvalue = value.HasValue ? new NullableInt32(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt32Value__SWIG_0(swigCPtr, columnIndex, NullableInt32.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetInt32Value(string columnName, int? value) {
    NullableInt32 tempvalue = value.HasValue ? new NullableInt32(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt32Value__SWIG_1(swigCPtr, columnName, NullableInt32.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public long? ValueAsInt64(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt64__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt64 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt64(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public long? ValueAsInt64(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsInt64__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableInt64 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableInt64(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetInt64Value(int columnIndex, long? value) {
    NullableInt64 tempvalue = value.HasValue ? new NullableInt64(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt64Value__SWIG_0(swigCPtr, columnIndex, NullableInt64.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetInt64Value(string columnName, long? value) {
    NullableInt64 tempvalue = value.HasValue ? new NullableInt64(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetInt64Value__SWIG_1(swigCPtr, columnName, NullableInt64.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public byte? ValueAsUInt8(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt8__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt8 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt8(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public byte? ValueAsUInt8(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt8__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt8 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt8(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetUInt8Value(int columnIndex, byte? value) {
    NullableUInt8 tempvalue = value.HasValue ? new NullableUInt8(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt8Value__SWIG_0(swigCPtr, columnIndex, NullableUInt8.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetUInt8Value(string columnName, byte? value) {
    NullableUInt8 tempvalue = value.HasValue ? new NullableUInt8(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt8Value__SWIG_1(swigCPtr, columnName, NullableUInt8.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public ushort? ValueAsUInt16(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt16__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt16 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt16(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public ushort? ValueAsUInt16(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt16__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt16 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt16(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetUInt16Value(int columnIndex, ushort? value) {
    NullableUInt16 tempvalue = value.HasValue ? new NullableUInt16(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt16Value__SWIG_0(swigCPtr, columnIndex, NullableUInt16.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetUInt16Value(string columnName, ushort? value) {
    NullableUInt16 tempvalue = value.HasValue ? new NullableUInt16(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt16Value__SWIG_1(swigCPtr, columnName, NullableUInt16.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public uint? ValueAsUInt32(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt32__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt32 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt32(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public uint? ValueAsUInt32(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt32__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt32 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt32(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetUInt32Value(int columnIndex, uint? value) {
    NullableUInt32 tempvalue = value.HasValue ? new NullableUInt32(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt32Value__SWIG_0(swigCPtr, columnIndex, NullableUInt32.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetUInt32Value(string columnName, uint? value) {
    NullableUInt32 tempvalue = value.HasValue ? new NullableUInt32(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt32Value__SWIG_1(swigCPtr, columnName, NullableUInt32.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public ulong? ValueAsUInt64(int columnIndex) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt64__SWIG_0(swigCPtr, columnIndex);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt64 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt64(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public ulong? ValueAsUInt64(string columnName) {
    global::System.IntPtr cPtr = CommonPINVOKE.DataRow_ValueAsUInt64__SWIG_1(swigCPtr, columnName);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    using (NullableUInt64 tempValue = (cPtr == global::System.IntPtr.Zero) ? null : new NullableUInt64(cPtr, false)) {
      if (tempValue?.HasValue() ?? false) return tempValue.GetValueOrDefault();
      return null;
    }
  }

  public void SetUInt64Value(int columnIndex, ulong? value) {
    NullableUInt64 tempvalue = value.HasValue ? new NullableUInt64(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt64Value__SWIG_0(swigCPtr, columnIndex, NullableUInt64.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  public void SetUInt64Value(string columnName, ulong? value) {
    NullableUInt64 tempvalue = value.HasValue ? new NullableUInt64(value.Value) : null;
    {
      CommonPINVOKE.DataRow_SetUInt64Value__SWIG_1(swigCPtr, columnName, NullableUInt64.getCPtr(tempvalue));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

        public DataTable Parent => _Parent();

        public object this[int columnIndex]
        {
            get
            {
                switch (Parent[columnIndex].Type)
                {
                    case DataType.String:
                        return ValueAsString(columnIndex);
                    case DataType.Boolean:
                        return ValueAsBoolean(columnIndex);
                    case DataType.DateTime:
                        return ValueAsDateTime(columnIndex);
                    case DataType.Single:
                        return ValueAsSingle(columnIndex);
                    case DataType.Double:
                        return ValueAsDouble(columnIndex);
                    case DataType.Decimal:
                        return ValueAsDecimal(columnIndex);
                    case DataType.Guid:
                        return ValueAsGuid(columnIndex);
                    case DataType.Int8:
                        return ValueAsInt8(columnIndex);
                    case DataType.Int16:
                        return ValueAsInt16(columnIndex);
                    case DataType.Int32:
                        return ValueAsInt32(columnIndex);
                    case DataType.Int64:
                        return ValueAsInt64(columnIndex);
                    case DataType.UInt8:
                        return ValueAsUInt8(columnIndex);
                    case DataType.UInt16:
                        return ValueAsUInt16(columnIndex);
                    case DataType.UInt32:
                        return ValueAsUInt32(columnIndex);
                    case DataType.UInt64:
                        return ValueAsUInt64(columnIndex);
                    default:
                        throw new System.ArgumentOutOfRangeException();
                }
            }
            set
            {
                switch (Parent[columnIndex].Type)
                {
                    case DataType.String:
                        SetStringValue(columnIndex, value.ToString());
                        break;
                    case DataType.Boolean:
                        SetBooleanValue(columnIndex, CastType<bool>(value));
                        break;
                    case DataType.DateTime:
                        SetDateTimeValue(columnIndex, CastType<System.DateTime>(value));
                        break;
                    case DataType.Single:
                        SetSingleValue(columnIndex, CastType<float>(value));
                        break;
                    case DataType.Double:
                        SetDoubleValue(columnIndex, CastType<double>(value));
                        break;
                    case DataType.Decimal:
                        SetDecimalValue(columnIndex, CastType<decimal>(value));
                        break;
                    case DataType.Guid:
                        SetGuidValue(columnIndex, CastType<System.Guid>(value));
                        break;
                    case DataType.Int8:
                        SetInt8Value(columnIndex, CastType<sbyte>(value));
                        break;
                    case DataType.Int16:
                        SetInt16Value(columnIndex, CastType<short>(value));
                        break;
                    case DataType.Int32:
                        SetInt32Value(columnIndex, CastType<int>(value));
                        break;
                    case DataType.Int64:
                        SetInt64Value(columnIndex, CastType<long>(value));
                        break;
                    case DataType.UInt8:
                        SetUInt8Value(columnIndex, CastType<byte>(value));
                        break;
                    case DataType.UInt16:
                        SetUInt16Value(columnIndex, CastType<ushort>(value));
                        break;
                    case DataType.UInt32:
                        SetUInt32Value(columnIndex, CastType<uint>(value));
                        break;
                    case DataType.UInt64:
                        SetUInt64Value(columnIndex, CastType<ulong>(value));
                        break;
                    default:
                        throw new System.ArgumentOutOfRangeException();
                }
            }
        }

        public object this[string columnName]
        {
            get
            {
                switch (Parent[columnName].Type)
                {
                    case DataType.String:
                        return ValueAsString(columnName);
                    case DataType.Boolean:
                        return ValueAsBoolean(columnName);
                    case DataType.DateTime:
                        return ValueAsDateTime(columnName);
                    case DataType.Single:
                        return ValueAsSingle(columnName);
                    case DataType.Double:
                        return ValueAsDouble(columnName);
                    case DataType.Decimal:
                        return ValueAsDecimal(columnName);
                    case DataType.Guid:
                        return ValueAsGuid(columnName);
                    case DataType.Int8:
                        return ValueAsInt8(columnName);
                    case DataType.Int16:
                        return ValueAsInt16(columnName);
                    case DataType.Int32:
                        return ValueAsInt32(columnName);
                    case DataType.Int64:
                        return ValueAsInt64(columnName);
                    case DataType.UInt8:
                        return ValueAsUInt8(columnName);
                    case DataType.UInt16:
                        return ValueAsUInt16(columnName);
                    case DataType.UInt32:
                        return ValueAsUInt32(columnName);
                    case DataType.UInt64:
                        return ValueAsUInt64(columnName);
                    default:
                        throw new System.ArgumentOutOfRangeException();
                }
            }
            set
            {
                switch (Parent[columnName].Type)
                {
                    case DataType.String:
                        SetStringValue(columnName, value.ToString());
                        break;
                    case DataType.Boolean:
                        SetBooleanValue(columnName, CastType<bool>(value));
                        break;
                    case DataType.DateTime:
                        SetDateTimeValue(columnName, CastType<System.DateTime>(value));
                        break;
                    case DataType.Single:
                        SetSingleValue(columnName, CastType<float>(value));
                        break;
                    case DataType.Double:
                        SetDoubleValue(columnName, CastType<double>(value));
                        break;
                    case DataType.Decimal:
                        SetDecimalValue(columnName, CastType<decimal>(value));
                        break;
                    case DataType.Guid:
                        SetGuidValue(columnName, CastType<System.Guid>(value));
                        break;
                    case DataType.Int8:
                        SetInt8Value(columnName, CastType<sbyte>(value));
                        break;
                    case DataType.Int16:
                        SetInt16Value(columnName, CastType<short>(value));
                        break;
                    case DataType.Int32:
                        SetInt32Value(columnName, CastType<int>(value));
                        break;
                    case DataType.Int64:
                        SetInt64Value(columnName, CastType<long>(value));
                        break;
                    case DataType.UInt8:
                        SetUInt8Value(columnName, CastType<byte>(value));
                        break;
                    case DataType.UInt16:
                        SetUInt16Value(columnName, CastType<ushort>(value));
                        break;
                    case DataType.UInt32:
                        SetUInt32Value(columnName, CastType<uint>(value));
                        break;
                    case DataType.UInt64:
                        SetUInt64Value(columnName, CastType<ulong>(value));
                        break;
                    default:
                        throw new System.ArgumentOutOfRangeException();
                }
            }
        }

        private static T? CastType<T>(object value) where T : struct
        {
            switch (value)
            {
                case null:
                    return null;
                case T result:
                    return result;
                default:
                    return (T)System.Convert.ChangeType(value, typeof(T));
            }
        }
    
}

}

//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class SubscriberConnector : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SubscriberConnector(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubscriberConnector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubscriberConnector() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          CommonPINVOKE.delete_SubscriberConnector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  private void SetHostname(string hostname) {
    CommonPINVOKE.SubscriberConnector_SetHostname(swigCPtr, hostname);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetPort(ushort port) {
    CommonPINVOKE.SubscriberConnector_SetPort(swigCPtr, port);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetMaxRetries(int maxRetries) {
    CommonPINVOKE.SubscriberConnector_SetMaxRetries(swigCPtr, maxRetries);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetRetryInterval(int retryInterval) {
    CommonPINVOKE.SubscriberConnector_SetRetryInterval(swigCPtr, retryInterval);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetMaxRetryInterval(int maxRetryInterval) {
    CommonPINVOKE.SubscriberConnector_SetMaxRetryInterval(swigCPtr, maxRetryInterval);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SetAutoReconnect(bool autoReconnect) {
    CommonPINVOKE.SubscriberConnector_SetAutoReconnect(swigCPtr, autoReconnect);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private string GetHostname() {
    string ret = CommonPINVOKE.SubscriberConnector_GetHostname(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private ushort GetPort() {
    ushort ret = CommonPINVOKE.SubscriberConnector_GetPort(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int GetMaxRetries() {
    int ret = CommonPINVOKE.SubscriberConnector_GetMaxRetries(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int GetRetryInterval() {
    int ret = CommonPINVOKE.SubscriberConnector_GetRetryInterval(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private int GetMaxRetryInterval() {
    int ret = CommonPINVOKE.SubscriberConnector_GetMaxRetryInterval(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool GetAutoReconnect() {
    bool ret = CommonPINVOKE.SubscriberConnector_GetAutoReconnect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool GetConnectionRefused() {
    bool ret = CommonPINVOKE.SubscriberConnector_GetConnectionRefused(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

        // Gets or sets the hostname of the publisher to connect to.
        public string HostName
        {
          get => GetHostname();
          set => SetHostname(value);
        }

        // Gets or sets the port that the publisher is listening on.
        public ushort Port
        {
          get => GetPort();
          set => SetPort(value);
        }

        // Gets or sets the maximum number of retries during a connection sequence.
        public int MaxRetries
        {
          get => GetMaxRetries();
          set => SetMaxRetries(value);
        }

        // Gets or sets the initial interval of idle time (in milliseconds) between connection attempts.
        public int RetryInterval
        {
          get => GetRetryInterval();
          set => SetRetryInterval(value);
        }

        // Gets or sets maximum retry interval - connection retry attempts use exponential back-off algorithm up to this defined maximum.
        public int MaxRetryInterval
        {
          get => GetMaxRetryInterval();
          set => SetMaxRetryInterval(value);
        }

        // Gets or sets flag that determines whether the subscriber should automatically attempt to reconnect when the connection is terminated.
        public bool AutoReconnect
        {
          get => GetAutoReconnect();
          set => SetAutoReconnect(value);
        }

        // Gets flag that determines if last connection attempt was refused.
        public bool ConnectionRefused => GetConnectionRefused();
    
  public SubscriberConnector() : this(CommonPINVOKE.new_SubscriberConnector(), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

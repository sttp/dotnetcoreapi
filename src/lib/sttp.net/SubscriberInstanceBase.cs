//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class SubscriberInstanceBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal SubscriberInstanceBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SubscriberInstanceBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SubscriberInstanceBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_SubscriberInstanceBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  protected virtual void SetupSubscriberConnector(SubscriberConnector connector) {
    if (SwigDerivedClassHasMethod("SetupSubscriberConnector", swigMethodTypes0)) CommonPINVOKE.SubscriberInstanceBase_SetupSubscriberConnectorSwigExplicitSubscriberInstanceBase(swigCPtr, SubscriberConnector.getCPtr(connector)); else CommonPINVOKE.SubscriberInstanceBase_SetupSubscriberConnector(swigCPtr, SubscriberConnector.getCPtr(connector));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual SubscriptionInfo CreateSubscriptionInfo() {
    SubscriptionInfo ret = new SubscriptionInfo((SwigDerivedClassHasMethod("CreateSubscriptionInfo", swigMethodTypes1) ? CommonPINVOKE.SubscriberInstanceBase_CreateSubscriptionInfoSwigExplicitSubscriberInstanceBase(swigCPtr) : CommonPINVOKE.SubscriberInstanceBase_CreateSubscriptionInfo(swigCPtr)), true);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  protected virtual void StatusMessage(string message) {
    if (SwigDerivedClassHasMethod("StatusMessage", swigMethodTypes2)) CommonPINVOKE.SubscriberInstanceBase_StatusMessageSwigExplicitSubscriberInstanceBase(swigCPtr, message); else CommonPINVOKE.SubscriberInstanceBase_StatusMessage(swigCPtr, message);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ErrorMessage(string message) {
    if (SwigDerivedClassHasMethod("ErrorMessage", swigMethodTypes3)) CommonPINVOKE.SubscriberInstanceBase_ErrorMessageSwigExplicitSubscriberInstanceBase(swigCPtr, message); else CommonPINVOKE.SubscriberInstanceBase_ErrorMessage(swigCPtr, message);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void DataStartTime(System.DateTime startTime) {
    datetime_t tempstartTime = Common.FromTicks(startTime.Ticks);
    {
      if (SwigDerivedClassHasMethod("DataStartTime", swigMethodTypes4)) CommonPINVOKE.SubscriberInstanceBase_DataStartTimeSwigExplicitSubscriberInstanceBase(swigCPtr, datetime_t.getCPtr(tempstartTime)); else CommonPINVOKE.SubscriberInstanceBase_DataStartTime(swigCPtr, datetime_t.getCPtr(tempstartTime));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    }
  }

  protected virtual void ReceivedMetadata(ByteBuffer payload) {
    if (SwigDerivedClassHasMethod("ReceivedMetadata", swigMethodTypes5)) CommonPINVOKE.SubscriberInstanceBase_ReceivedMetadataSwigExplicitSubscriberInstanceBase(swigCPtr, ByteBuffer.getCPtr(payload)); else CommonPINVOKE.SubscriberInstanceBase_ReceivedMetadata(swigCPtr, ByteBuffer.getCPtr(payload));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ParsedMetadata() {
    if (SwigDerivedClassHasMethod("ParsedMetadata", swigMethodTypes6)) CommonPINVOKE.SubscriberInstanceBase_ParsedMetadataSwigExplicitSubscriberInstanceBase(swigCPtr); else CommonPINVOKE.SubscriberInstanceBase_ParsedMetadata(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SubscriptionUpdated(SignalIndexCache signalIndexCache) {
    if (SwigDerivedClassHasMethod("SubscriptionUpdated", swigMethodTypes7)) CommonPINVOKE.SubscriberInstanceBase_SubscriptionUpdatedSwigExplicitSubscriberInstanceBase(swigCPtr, SignalIndexCache.getCPtr(signalIndexCache)); else CommonPINVOKE.SubscriberInstanceBase_SubscriptionUpdated(swigCPtr, SignalIndexCache.getCPtr(signalIndexCache));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  internal virtual void ReceivedNewMeasurements(SimpleMeasurement measurements, int length) {
    if (SwigDerivedClassHasMethod("ReceivedNewMeasurements", swigMethodTypes8)) CommonPINVOKE.SubscriberInstanceBase_ReceivedNewMeasurementsSwigExplicitSubscriberInstanceBase(swigCPtr, SimpleMeasurement.getCPtr(measurements), length); else CommonPINVOKE.SubscriberInstanceBase_ReceivedNewMeasurements(swigCPtr, SimpleMeasurement.getCPtr(measurements), length);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ConfigurationChanged() {
    if (SwigDerivedClassHasMethod("ConfigurationChanged", swigMethodTypes9)) CommonPINVOKE.SubscriberInstanceBase_ConfigurationChangedSwigExplicitSubscriberInstanceBase(swigCPtr); else CommonPINVOKE.SubscriberInstanceBase_ConfigurationChanged(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void HistoricalReadComplete() {
    if (SwigDerivedClassHasMethod("HistoricalReadComplete", swigMethodTypes10)) CommonPINVOKE.SubscriberInstanceBase_HistoricalReadCompleteSwigExplicitSubscriberInstanceBase(swigCPtr); else CommonPINVOKE.SubscriberInstanceBase_HistoricalReadComplete(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ConnectionEstablished() {
    if (SwigDerivedClassHasMethod("ConnectionEstablished", swigMethodTypes11)) CommonPINVOKE.SubscriberInstanceBase_ConnectionEstablishedSwigExplicitSubscriberInstanceBase(swigCPtr); else CommonPINVOKE.SubscriberInstanceBase_ConnectionEstablished(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected virtual void ConnectionTerminated() {
    if (SwigDerivedClassHasMethod("ConnectionTerminated", swigMethodTypes12)) CommonPINVOKE.SubscriberInstanceBase_ConnectionTerminatedSwigExplicitSubscriberInstanceBase(swigCPtr); else CommonPINVOKE.SubscriberInstanceBase_ConnectionTerminated(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAssemblyInfo(out string source, out string version, out string updatedOn) {
    CommonPINVOKE.SubscriberInstanceBase_GetAssemblyInfo(swigCPtr, out source, out version, out updatedOn);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAssemblyInfo(string source, string version, string updatedOn) {
    CommonPINVOKE.SubscriberInstanceBase_SetAssemblyInfo(swigCPtr, source, version, updatedOn);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  protected SubscriberInstanceBase() : this(CommonPINVOKE.new_SubscriberInstanceBase(), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public void Initialize(string hostname, ushort port, ushort udpPort) {
    CommonPINVOKE.SubscriberInstanceBase_Initialize__SWIG_0(swigCPtr, hostname, port, udpPort);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(string hostname, ushort port) {
    CommonPINVOKE.SubscriberInstanceBase_Initialize__SWIG_1(swigCPtr, hostname, port);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public System.Guid GetSubscriberID() {
      global::System.IntPtr cPtr = CommonPINVOKE.SubscriberInstanceBase_GetSubscriberID(swigCPtr);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      using (guid_t tempGuid = (cPtr == global::System.IntPtr.Zero) ? null : new guid_t(cPtr, false)) {
        byte[] data = new byte[16];
        Common.GetGuidBytes(tempGuid, data);
        return new System.Guid(data);
      }
    }

  private bool GetAutoReconnect() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_GetAutoReconnect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAutoReconnect(bool autoReconnect) {
    CommonPINVOKE.SubscriberInstanceBase_SetAutoReconnect(swigCPtr, autoReconnect);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool GetAutoParseMetadata() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_GetAutoParseMetadata(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetAutoParseMetadata(bool autoParseMetadata) {
    CommonPINVOKE.SubscriberInstanceBase_SetAutoParseMetadata(swigCPtr, autoParseMetadata);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private short GetMaxRetries() {
    short ret = CommonPINVOKE.SubscriberInstanceBase_GetMaxRetries(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMaxRetries(short maxRetries) {
    CommonPINVOKE.SubscriberInstanceBase_SetMaxRetries(swigCPtr, maxRetries);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private short GetRetryInterval() {
    short ret = CommonPINVOKE.SubscriberInstanceBase_GetRetryInterval(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetRetryInterval(short retryInterval) {
    CommonPINVOKE.SubscriberInstanceBase_SetRetryInterval(swigCPtr, retryInterval);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private string GetFilterExpression() {
    string ret = CommonPINVOKE.SubscriberInstanceBase_GetFilterExpression(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetFilterExpression(string filterExpression) {
    CommonPINVOKE.SubscriberInstanceBase_SetFilterExpression(swigCPtr, filterExpression);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private string GetMetadataFilters() {
    string ret = CommonPINVOKE.SubscriberInstanceBase_GetMetadataFilters(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMetadataFilters(string metadataFilters) {
    CommonPINVOKE.SubscriberInstanceBase_SetMetadataFilters(swigCPtr, metadataFilters);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Connect() {
    CommonPINVOKE.SubscriberInstanceBase_Connect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConnectAsync() {
    CommonPINVOKE.SubscriberInstanceBase_ConnectAsync(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Disconnect() {
    CommonPINVOKE.SubscriberInstanceBase_Disconnect(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EstablishHistoricalRead(string startTime, string stopTime) {
    CommonPINVOKE.SubscriberInstanceBase_EstablishHistoricalRead(swigCPtr, startTime, stopTime);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetHistoricalReplayInterval(int replayInterval) {
    CommonPINVOKE.SubscriberInstanceBase_SetHistoricalReplayInterval(swigCPtr, replayInterval);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsPayloadDataCompressed() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_IsPayloadDataCompressed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetPayloadDataCompressed(bool compressed) {
    CommonPINVOKE.SubscriberInstanceBase_SetPayloadDataCompressed(swigCPtr, compressed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsMetadataCompressed() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_IsMetadataCompressed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetMetadataCompressed(bool compressed) {
    CommonPINVOKE.SubscriberInstanceBase_SetMetadataCompressed(swigCPtr, compressed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  private bool IsSignalIndexCacheCompressed() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_IsSignalIndexCacheCompressed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SetSignalIndexCacheCompressed(bool compressed) {
    CommonPINVOKE.SubscriberInstanceBase_SetSignalIndexCacheCompressed(swigCPtr, compressed);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public ulong GetTotalCommandChannelBytesReceived() {
    ulong ret = CommonPINVOKE.SubscriberInstanceBase_GetTotalCommandChannelBytesReceived(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalDataChannelBytesReceived() {
    ulong ret = CommonPINVOKE.SubscriberInstanceBase_GetTotalDataChannelBytesReceived(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalMeasurementsReceived() {
    ulong ret = CommonPINVOKE.SubscriberInstanceBase_GetTotalMeasurementsReceived(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool IsConnected() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_IsConnected(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private bool IsSubscribed() {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_IsSubscribed(swigCPtr);
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TryGetDeviceAcronyms(StringCollection deviceAcronyms) {
    bool ret = CommonPINVOKE.SubscriberInstanceBase_TryGetDeviceAcronyms(swigCPtr, StringCollection.getCPtr(deviceAcronyms));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetParsedDeviceMetadata(DeviceMetadataMap devices) {
    CommonPINVOKE.SubscriberInstanceBase_GetParsedDeviceMetadata(swigCPtr, DeviceMetadataMap.getCPtr(devices));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetParsedMeasurementMetadata(MeasurementMetadataMap measurements) {
    CommonPINVOKE.SubscriberInstanceBase_GetParsedMeasurementMetadata(swigCPtr, MeasurementMetadataMap.getCPtr(measurements));
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool TryGetDeviceMetadata(string deviceAcronym, out DeviceMetadata deviceMetadata) {
    deviceMetadata = new DeviceMetadata();
    {
      bool ret = CommonPINVOKE.SubscriberInstanceBase_TryGetDeviceMetadata(swigCPtr, deviceAcronym, DeviceMetadata.getCPtr(deviceMetadata));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public bool TryGetMeasurementMetdata(System.Guid signalID, out MeasurementMetadata measurementMetadata) {
    guid_t tempsignalID = Common.ParseGuid(signalID.ToByteArray(), true);
    measurementMetadata = new MeasurementMetadata();
    {
      bool ret = CommonPINVOKE.SubscriberInstanceBase_TryGetMeasurementMetdata(swigCPtr, guid_t.getCPtr(tempsignalID), MeasurementMetadata.getCPtr(measurementMetadata));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public bool TryGetConfigurationFrame(string deviceAcronym, out ConfigurationFrame configurationFrame) {
    configurationFrame = new ConfigurationFrame();
    {
      bool ret = CommonPINVOKE.SubscriberInstanceBase_TryGetConfigurationFrame(swigCPtr, deviceAcronym, ConfigurationFrame.getCPtr(configurationFrame));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public bool TryFindTargetConfigurationFrame(System.Guid signalID, out ConfigurationFrame targetFrame) {
    guid_t tempsignalID = Common.ParseGuid(signalID.ToByteArray(), true);
    targetFrame = new ConfigurationFrame();
    {
      bool ret = CommonPINVOKE.SubscriberInstanceBase_TryFindTargetConfigurationFrame(swigCPtr, guid_t.getCPtr(tempsignalID), ConfigurationFrame.getCPtr(targetFrame));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

  public static bool TryGetMeasurementMetdataFromConfigurationFrame(System.Guid signalID, ConfigurationFrame sourceFrame, out MeasurementMetadata measurementMetadata) {
    guid_t tempsignalID = Common.ParseGuid(signalID.ToByteArray(), true);
    measurementMetadata = new MeasurementMetadata();
    {
      bool ret = CommonPINVOKE.SubscriberInstanceBase_TryGetMeasurementMetdataFromConfigurationFrame(guid_t.getCPtr(tempsignalID), ConfigurationFrame.getCPtr(sourceFrame), MeasurementMetadata.getCPtr(measurementMetadata));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    }
  }

        public void EstablishHistoricalRead(System.DateTime startTime, System.DateTime stopTime) => EstablishHistoricalRead($"{startTime:yyyy-MM-dd HH:mm:ss.fff}", $"{stopTime:yyyy-MM-dd HH:mm:ss.fff}");

        // Gets or sets flag that determines if auto-reconnect is enabled.
        public bool AutoReconnect
        {
          get => GetAutoReconnect();
          set => SetAutoReconnect(value);
        }

        // Gets or sets flag that determines if metadata should be automatically
        // parsed. When true, metadata will be requested upon connection before
        // subscription; otherwise, metadata will not be manually requested and
        // subscribe will happen upon connection.
        public bool AutoParseMetadata
        {
          get => GetAutoParseMetadata();
          set => SetAutoParseMetadata(value);
        }

        // Gets or sets maximum connection retries.
        public short MaxRetries
        {
          get => GetMaxRetries();
          set => SetMaxRetries(value);
        }

        // Gets or sets the initial interval of idle time (in milliseconds) between connection attempts.
        public short RetryInterval
        {
          get => GetRetryInterval();
          set => SetRetryInterval(value);
        }

        // Gets or sets a filter expression to control which points to receive. The filter expression
        // defaults to all non-static points available. When specified before the Connect function,
        // this filter expression will be used for the initial connection. Updating the filter
        // expression while a subscription is active will cause a resubscribe with new expression.
        public string FilterExpression
        {
          get => GetFilterExpression();
          set => SetFilterExpression(value);
        }

        // Gets or sets any metadata filters to be applied to incoming metadata. Each separate filter
        // should be separated by semi-colons.
        public string MetadataFilters
        {
          get => GetMetadataFilters();
          set => SetMetadataFilters(value);
        }

        // Gets or sets value that determines whether payload data is compressed using TSSC.
        public bool PayloadDataCompressed
        {
          get => IsPayloadDataCompressed();
          set => SetPayloadDataCompressed(value);
        }

        // Gets or sets value that determines whether the metadata transfer is compressed using GZip.
        public bool MetadataCompressed
        {
          get => IsMetadataCompressed();
          set => SetMetadataCompressed(value);
        }

        // Gets or sets flag that determines whether the signal index cache is compressed using GZip.
        public bool SignalIndexCacheCompressed
        {
          get => IsSignalIndexCacheCompressed();
          set => SetSignalIndexCacheCompressed(value);
        }

        public bool Connected => IsConnected();

        public bool Subscribed => IsSubscribed();
    
  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("SetupSubscriberConnector", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateSubscriberInstanceBase_0(SwigDirectorMethodSetupSubscriberConnector);
    if (SwigDerivedClassHasMethod("CreateSubscriptionInfo", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateSubscriberInstanceBase_1(SwigDirectorMethodCreateSubscriptionInfo);
    if (SwigDerivedClassHasMethod("StatusMessage", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateSubscriberInstanceBase_2(SwigDirectorMethodStatusMessage);
    if (SwigDerivedClassHasMethod("ErrorMessage", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateSubscriberInstanceBase_3(SwigDirectorMethodErrorMessage);
    if (SwigDerivedClassHasMethod("DataStartTime", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateSubscriberInstanceBase_4(SwigDirectorMethodDataStartTime);
    if (SwigDerivedClassHasMethod("ReceivedMetadata", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateSubscriberInstanceBase_5(SwigDirectorMethodReceivedMetadata);
    if (SwigDerivedClassHasMethod("ParsedMetadata", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateSubscriberInstanceBase_6(SwigDirectorMethodParsedMetadata);
    if (SwigDerivedClassHasMethod("SubscriptionUpdated", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateSubscriberInstanceBase_7(SwigDirectorMethodSubscriptionUpdated);
    if (SwigDerivedClassHasMethod("ReceivedNewMeasurements", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateSubscriberInstanceBase_8(SwigDirectorMethodReceivedNewMeasurements);
    if (SwigDerivedClassHasMethod("ConfigurationChanged", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateSubscriberInstanceBase_9(SwigDirectorMethodConfigurationChanged);
    if (SwigDerivedClassHasMethod("HistoricalReadComplete", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateSubscriberInstanceBase_10(SwigDirectorMethodHistoricalReadComplete);
    if (SwigDerivedClassHasMethod("ConnectionEstablished", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateSubscriberInstanceBase_11(SwigDirectorMethodConnectionEstablished);
    if (SwigDerivedClassHasMethod("ConnectionTerminated", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateSubscriberInstanceBase_12(SwigDirectorMethodConnectionTerminated);
    CommonPINVOKE.SubscriberInstanceBase_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SubscriberInstanceBase));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodSetupSubscriberConnector(global::System.IntPtr connector) {
    SetupSubscriberConnector(new SubscriberConnector(connector, false));
  }

  private global::System.IntPtr SwigDirectorMethodCreateSubscriptionInfo() {
    return SubscriptionInfo.getCPtr(CreateSubscriptionInfo()).Handle;
  }

  private void SwigDirectorMethodStatusMessage(string message) {
    StatusMessage(message);
  }

  private void SwigDirectorMethodErrorMessage(string message) {
    ErrorMessage(message);
  }

  private void SwigDirectorMethodDataStartTime(global::System.IntPtr startTime) {
    datetime_t tempDate = new datetime_t(startTime, false);
    System.DateTime tempstartTime  = new System.DateTime(Common.ToTicks(tempDate));
    DataStartTime(tempstartTime);
  }

  private void SwigDirectorMethodReceivedMetadata(global::System.IntPtr payload) {
    ReceivedMetadata(new ByteBuffer(payload, false));
  }

  private void SwigDirectorMethodParsedMetadata() {
    ParsedMetadata();
  }

  private void SwigDirectorMethodSubscriptionUpdated(global::System.IntPtr signalIndexCache) {
    SubscriptionUpdated((signalIndexCache == global::System.IntPtr.Zero) ? null : new SignalIndexCache(signalIndexCache, true));
  }

  private void SwigDirectorMethodReceivedNewMeasurements(global::System.IntPtr measurements, int length) {
    ReceivedNewMeasurements((measurements == global::System.IntPtr.Zero) ? null : new SimpleMeasurement(measurements, false), length);
  }

  private void SwigDirectorMethodConfigurationChanged() {
    ConfigurationChanged();
  }

  private void SwigDirectorMethodHistoricalReadComplete() {
    HistoricalReadComplete();
  }

  private void SwigDirectorMethodConnectionEstablished() {
    ConnectionEstablished();
  }

  private void SwigDirectorMethodConnectionTerminated() {
    ConnectionTerminated();
  }

  public delegate void SwigDelegateSubscriberInstanceBase_0(global::System.IntPtr connector);
  public delegate global::System.IntPtr SwigDelegateSubscriberInstanceBase_1();
  public delegate void SwigDelegateSubscriberInstanceBase_2(string message);
  public delegate void SwigDelegateSubscriberInstanceBase_3(string message);
  public delegate void SwigDelegateSubscriberInstanceBase_4(global::System.IntPtr startTime);
  public delegate void SwigDelegateSubscriberInstanceBase_5(global::System.IntPtr payload);
  public delegate void SwigDelegateSubscriberInstanceBase_6();
  public delegate void SwigDelegateSubscriberInstanceBase_7(global::System.IntPtr signalIndexCache);
  public delegate void SwigDelegateSubscriberInstanceBase_8(global::System.IntPtr measurements, int length);
  public delegate void SwigDelegateSubscriberInstanceBase_9();
  public delegate void SwigDelegateSubscriberInstanceBase_10();
  public delegate void SwigDelegateSubscriberInstanceBase_11();
  public delegate void SwigDelegateSubscriberInstanceBase_12();

  private SwigDelegateSubscriberInstanceBase_0 swigDelegate0;
  private SwigDelegateSubscriberInstanceBase_1 swigDelegate1;
  private SwigDelegateSubscriberInstanceBase_2 swigDelegate2;
  private SwigDelegateSubscriberInstanceBase_3 swigDelegate3;
  private SwigDelegateSubscriberInstanceBase_4 swigDelegate4;
  private SwigDelegateSubscriberInstanceBase_5 swigDelegate5;
  private SwigDelegateSubscriberInstanceBase_6 swigDelegate6;
  private SwigDelegateSubscriberInstanceBase_7 swigDelegate7;
  private SwigDelegateSubscriberInstanceBase_8 swigDelegate8;
  private SwigDelegateSubscriberInstanceBase_9 swigDelegate9;
  private SwigDelegateSubscriberInstanceBase_10 swigDelegate10;
  private SwigDelegateSubscriberInstanceBase_11 swigDelegate11;
  private SwigDelegateSubscriberInstanceBase_12 swigDelegate12;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(SubscriberConnector) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(string) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(System.DateTime) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(ByteBuffer) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(SignalIndexCache) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(SimpleMeasurement), typeof(int) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] {  };
  public static readonly string SubscribeAllExpression = CommonPINVOKE.SubscriberInstanceBase_SubscribeAllExpression_get();
  public static readonly string SubscribeAllNoStatsExpression = CommonPINVOKE.SubscriberInstanceBase_SubscribeAllNoStatsExpression_get();
  public static readonly string FilterMetadataStatsExpression = CommonPINVOKE.SubscriberInstanceBase_FilterMetadataStatsExpression_get();
}

}

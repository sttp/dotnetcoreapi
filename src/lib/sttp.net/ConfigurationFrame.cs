//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace sttp {

public class ConfigurationFrame : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ConfigurationFrame(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ConfigurationFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ConfigurationFrame() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CommonPINVOKE.delete_ConfigurationFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string DeviceAcronym {
    set {
      CommonPINVOKE.ConfigurationFrame_DeviceAcronym_set(swigCPtr, value);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = CommonPINVOKE.ConfigurationFrame_DeviceAcronym_get(swigCPtr);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeasurementMetadata QualityFlags {
    set {
      CommonPINVOKE.ConfigurationFrame_QualityFlags_set(swigCPtr, MeasurementMetadata.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_QualityFlags_get(swigCPtr);
      MeasurementMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeasurementMetadata(cPtr, true);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeasurementMetadata StatusFlags {
    set {
      CommonPINVOKE.ConfigurationFrame_StatusFlags_set(swigCPtr, MeasurementMetadata.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_StatusFlags_get(swigCPtr);
      MeasurementMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeasurementMetadata(cPtr, true);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeasurementMetadata Frequency {
    set {
      CommonPINVOKE.ConfigurationFrame_Frequency_set(swigCPtr, MeasurementMetadata.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_Frequency_get(swigCPtr);
      MeasurementMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeasurementMetadata(cPtr, true);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeasurementMetadata DfDt {
    set {
      CommonPINVOKE.ConfigurationFrame_DfDt_set(swigCPtr, MeasurementMetadata.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_DfDt_get(swigCPtr);
      MeasurementMetadata ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeasurementMetadata(cPtr, true);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public PhasorReferenceCollection Phasors {
    set {
      CommonPINVOKE.ConfigurationFrame_Phasors_set(swigCPtr, PhasorReferenceCollection.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_Phasors_get(swigCPtr);
      PhasorReferenceCollection ret = (cPtr == global::System.IntPtr.Zero) ? null : new PhasorReferenceCollection(cPtr, false);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeasurementMetadataCollection Analogs {
    set {
      CommonPINVOKE.ConfigurationFrame_Analogs_set(swigCPtr, MeasurementMetadataCollection.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_Analogs_get(swigCPtr);
      MeasurementMetadataCollection ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeasurementMetadataCollection(cPtr, false);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public MeasurementMetadataCollection Digitals {
    set {
      CommonPINVOKE.ConfigurationFrame_Digitals_set(swigCPtr, MeasurementMetadataCollection.getCPtr(value));
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = CommonPINVOKE.ConfigurationFrame_Digitals_get(swigCPtr);
      MeasurementMetadataCollection ret = (cPtr == global::System.IntPtr.Zero) ? null : new MeasurementMetadataCollection(cPtr, false);
      if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ConfigurationFrame() : this(CommonPINVOKE.new_ConfigurationFrame(), true) {
    if (CommonPINVOKE.SWIGPendingException.Pending) throw CommonPINVOKE.SWIGPendingException.Retrieve();
  }

}

}

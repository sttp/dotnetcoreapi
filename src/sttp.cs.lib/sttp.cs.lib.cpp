/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Common(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Common(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Common(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#include <stdint.h>		// Use the C99 official header


#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <typeinfo>
#include <stdexcept>


// Include STTP library header files
#include "../cppapi/src/lib/CommonTypes.h"
#include "../cppapi/src/lib/Nullable.h"
#include "../cppapi/src/lib/data/DataSet.h"
#include "../cppapi/src/lib/transport/TransportTypes.h"
#include "../cppapi/src/lib/transport/SubscriberInstance.h"
#include "../cppapi/src/lib/transport/DataPublisher.h"
#include "../cppapi/src/lib/transport/PublisherInstance.h"


    // Get byte array representing a globally unique identifier
    void GetGuidBytes(const sttp::Guid& value, uint8_t* data)
    {
        memcpy(data, value.data, 16);

        uint8_t copy[8];

        for (uint32_t i = 0; i < 8; i++)
            copy[i] = data[i];

        // The following uint32 and two uint16 values are little-endian encoded in Microsoft implementations,
        // boost follows RFC encoding rules and encodes the bytes as big-endian. For proper Guid interpretation
        // by .NET applications the following bytes must be swapped before deserialization:
        data[3] = copy[0];
        data[2] = copy[1];
        data[1] = copy[2];
        data[0] = copy[3];

        data[4] = copy[5];
        data[5] = copy[4];

        data[6] = copy[7];
        data[7] = copy[6];
    }

    std::string GetSubscriberConnectionIPAddress(const boost::shared_ptr<sttp::transport::SubscriberConnection>& connection)
    {
        return connection->GetIPAddress().to_string();
    }

SWIGINTERN std::vector< unsigned char > *new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(int capacity){
        std::vector< unsigned char >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< unsigned char >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN unsigned char std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< unsigned char >::value_type const &std_vector_Sl_unsigned_SS_char_Sg__getitem(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__setitem(std::vector< unsigned char > *self,int index,unsigned char const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__AddRange(std::vector< unsigned char > *self,std::vector< unsigned char > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__GetRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< unsigned char >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Insert(std::vector< unsigned char > *self,int index,unsigned char const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__InsertRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(std::vector< unsigned char > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< unsigned char > *std_vector_Sl_unsigned_SS_char_Sg__Repeat(unsigned char const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< unsigned char >(count, value);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(std::vector< unsigned char > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(std::vector< unsigned char > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__SetRange(std::vector< unsigned char > *self,int index,std::vector< unsigned char > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Contains(std::vector< unsigned char > *self,unsigned char const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__IndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(std::vector< unsigned char > *self,unsigned char const &value){
        int index = -1;
        std::vector< unsigned char >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_unsigned_SS_char_Sg__Remove(std::vector< unsigned char > *self,unsigned char const &value){
        std::vector< unsigned char >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< std::string >::value_type const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
          return true;
        }
        return false;
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::data::DataTable > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::data::DataTable > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::data::DataTable > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::data::DataTable > std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::data::DataTable > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,boost::shared_ptr< sttp::data::DataTable > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,std::vector< boost::shared_ptr< sttp::data::DataTable > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::data::DataTable > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::data::DataTable > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,boost::shared_ptr< sttp::data::DataTable > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,std::vector< boost::shared_ptr< sttp::data::DataTable > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::data::DataTable > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Repeat(boost::shared_ptr< sttp::data::DataTable > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::data::DataTable > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::data::DataTable > > *self,int index,std::vector< boost::shared_ptr< sttp::data::DataTable > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::Measurement > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::transport::Measurement > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::transport::Measurement > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::transport::Measurement > std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::Measurement > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,boost::shared_ptr< sttp::transport::Measurement > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::Measurement > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::transport::Measurement > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,boost::shared_ptr< sttp::transport::Measurement > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::Measurement > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Repeat(boost::shared_ptr< sttp::transport::Measurement > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::transport::Measurement > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::transport::Measurement > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::transport::MeasurementMetadata > std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,boost::shared_ptr< sttp::transport::MeasurementMetadata > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,boost::shared_ptr< sttp::transport::MeasurementMetadata > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Repeat(boost::shared_ptr< sttp::transport::MeasurementMetadata > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::transport::PhasorMetadata > std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,boost::shared_ptr< sttp::transport::PhasorMetadata > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,boost::shared_ptr< sttp::transport::PhasorMetadata > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Repeat(boost::shared_ptr< sttp::transport::PhasorMetadata > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::transport::PhasorReference > std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,boost::shared_ptr< sttp::transport::PhasorReference > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,boost::shared_ptr< sttp::transport::PhasorReference > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Repeat(boost::shared_ptr< sttp::transport::PhasorReference > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::transport::DeviceMetadata > std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,boost::shared_ptr< sttp::transport::DeviceMetadata > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,boost::shared_ptr< sttp::transport::DeviceMetadata > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Repeat(boost::shared_ptr< sttp::transport::DeviceMetadata > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg___SWIG_2(int capacity){
        std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN boost::shared_ptr< sttp::transport::SubscriberConnection > std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__getitemcopy(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::value_type const &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__getitem(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__setitem(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,boost::shared_ptr< sttp::transport::SubscriberConnection > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__AddRange(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__GetRange(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Insert(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,boost::shared_ptr< sttp::transport::SubscriberConnection > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__InsertRange(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__RemoveAt(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__RemoveRange(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Repeat(boost::shared_ptr< sttp::transport::SubscriberConnection > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >(count, value);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Reverse__SWIG_0(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Reverse__SWIG_1(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__SetRange(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *self,int index,std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type const &std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__getitem(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type const &key){
        std::map< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__setitem(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type const &key,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__ContainsKey(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type const &key){
        std::map< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata >, std::less< std::string > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Add(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type const &key,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type const &value){
        std::map< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata > >(key, value));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Remove(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type const &key){
        std::map< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata >, std::less< std::string > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__create_iterator_begin(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self){
        return new std::map< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata >, std::less< std::string > >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type const &std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__get_next_key(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *swigiterator){
        std::map< std::string, boost::shared_ptr< sttp::transport::DeviceMetadata >, std::less< std::string > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__destroy_iterator(std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *self,std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type const &std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__getitem(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const &key){
        std::map< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata >, std::less< sttp::Guid > >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__setitem(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const &key,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__ContainsKey(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const &key){
        std::map< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata >, std::less< sttp::Guid > >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Add(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const &key,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type const &value){
        std::map< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata >, std::less< sttp::Guid > >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata > >(key, value));
      }
SWIGINTERN bool std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Remove(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const &key){
        std::map< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata >, std::less< sttp::Guid > >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }
        return false;
      }
SWIGINTERN std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__create_iterator_begin(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self){
        return new std::map< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata >, std::less< sttp::Guid > >::iterator(self->begin());
      }
SWIGINTERN std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const &std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__get_next_key(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *swigiterator){
        std::map< sttp::Guid, boost::shared_ptr< sttp::transport::MeasurementMetadata >, std::less< sttp::Guid > >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__destroy_iterator(std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *self,std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *swigiterator){
        delete swigiterator;
      }

struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_decimal_t(void * jarg1) {
  sttp::decimal_t *arg1 = (sttp::decimal_t *) 0 ;
  
  arg1 = (sttp::decimal_t *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_guid_t(void * jarg1) {
  sttp::Guid *arg1 = (sttp::Guid *) 0 ;
  
  arg1 = (sttp::Guid *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_datetime_t(void * jarg1) {
  sttp::datetime_t *arg1 = (sttp::datetime_t *) 0 ;
  
  arg1 = (sttp::datetime_t *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_io_context_t(void * jarg1) {
  sttp::IOContext *arg1 = (sttp::IOContext *) 0 ;
  
  arg1 = (sttp::IOContext *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_datapublisher_t(void * jarg1) {
  sttp::transport::DataPublisher *arg1 = (sttp::transport::DataPublisher *) 0 ;
  
  arg1 = (sttp::transport::DataPublisher *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_GetGuidBytes(void * jarg1, unsigned char* jarg2) {
  sttp::Guid *arg1 = 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  arg1 = (sttp::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return ;
  } 
  arg2 = jarg2;
  {
    try
    {
      GetGuidBytes((sttp::Guid const &)*arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_GetSubscriberConnectionIPAddress(void * jarg1) {
  char * jresult ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *arg1 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > tempnull1 ;
  std::string result;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::SubscriberConnection > *)jarg1 : &tempnull1; 
  {
    try
    {
      result = GetSubscriberConnectionIPAddress((boost::shared_ptr< sttp::transport::SubscriberConnection > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableString__SWIG_0() {
  void * jresult ;
  sttp::Nullable< std::string > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< std::string > *)new sttp::Nullable< std::string >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableString__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  sttp::Nullable< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = (sttp::Nullable< std::string > *)new sttp::Nullable< std::string >((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableString_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< std::string > *arg1 = (sttp::Nullable< std::string > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< std::string > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< std::string > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_NullableString_GetValueOrDefault(void * jarg1) {
  char * jresult ;
  sttp::Nullable< std::string > *arg1 = (sttp::Nullable< std::string > *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::Nullable< std::string > *)jarg1; 
  {
    try
    {
      result = (std::string *) &((sttp::Nullable< std::string > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableString(void * jarg1) {
  sttp::Nullable< std::string > *arg1 = (sttp::Nullable< std::string > *) 0 ;
  
  arg1 = (sttp::Nullable< std::string > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableBool__SWIG_0() {
  void * jresult ;
  sttp::Nullable< bool > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< bool > *)new sttp::Nullable< bool >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableBool__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool *arg1 = 0 ;
  bool temp1 ;
  sttp::Nullable< bool > *result = 0 ;
  
  temp1 = jarg1 ? true : false; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< bool > *)new sttp::Nullable< bool >((bool const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableBool_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< bool > *arg1 = (sttp::Nullable< bool > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< bool > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< bool > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableBool_GetValueOrDefault(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< bool > *arg1 = (sttp::Nullable< bool > *) 0 ;
  bool *result = 0 ;
  
  arg1 = (sttp::Nullable< bool > *)jarg1; 
  {
    try
    {
      result = (bool *) &((sttp::Nullable< bool > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableBool(void * jarg1) {
  sttp::Nullable< bool > *arg1 = (sttp::Nullable< bool > *) 0 ;
  
  arg1 = (sttp::Nullable< bool > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableDateTime__SWIG_0() {
  void * jresult ;
  sttp::Nullable< sttp::datetime_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< sttp::datetime_t > *)new sttp::Nullable< sttp::datetime_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableDateTime__SWIG_1(void * jarg1) {
  void * jresult ;
  sttp::datetime_t *arg1 = 0 ;
  sttp::Nullable< sttp::datetime_t > *result = 0 ;
  
  arg1 = (sttp::datetime_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::datetime_t const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (sttp::Nullable< sttp::datetime_t > *)new sttp::Nullable< sttp::datetime_t >((sttp::datetime_t const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableDateTime_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< sttp::datetime_t > *arg1 = (sttp::Nullable< sttp::datetime_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< sttp::datetime_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< sttp::datetime_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_NullableDateTime_GetValueOrDefault(void * jarg1) {
  void * jresult ;
  sttp::Nullable< sttp::datetime_t > *arg1 = (sttp::Nullable< sttp::datetime_t > *) 0 ;
  sttp::datetime_t *result = 0 ;
  
  arg1 = (sttp::Nullable< sttp::datetime_t > *)jarg1; 
  {
    try
    {
      result = (sttp::datetime_t *) &((sttp::Nullable< sttp::datetime_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableDateTime(void * jarg1) {
  sttp::Nullable< sttp::datetime_t > *arg1 = (sttp::Nullable< sttp::datetime_t > *) 0 ;
  
  arg1 = (sttp::Nullable< sttp::datetime_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableFloat32__SWIG_0() {
  void * jresult ;
  sttp::Nullable< sttp::float32_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< sttp::float32_t > *)new sttp::Nullable< sttp::float32_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableFloat32__SWIG_1(float jarg1) {
  void * jresult ;
  float *arg1 = 0 ;
  float temp1 ;
  sttp::Nullable< sttp::float32_t > *result = 0 ;
  
  temp1 = (float)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< sttp::float32_t > *)new sttp::Nullable< sttp::float32_t >((float const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableFloat32_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< sttp::float32_t > *arg1 = (sttp::Nullable< sttp::float32_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< sttp::float32_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< sttp::float32_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_sttp_NullableFloat32_GetValueOrDefault(void * jarg1) {
  float jresult ;
  sttp::Nullable< sttp::float32_t > *arg1 = (sttp::Nullable< sttp::float32_t > *) 0 ;
  float *result = 0 ;
  
  arg1 = (sttp::Nullable< sttp::float32_t > *)jarg1; 
  {
    try
    {
      result = (float *) &((sttp::Nullable< sttp::float32_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableFloat32(void * jarg1) {
  sttp::Nullable< sttp::float32_t > *arg1 = (sttp::Nullable< sttp::float32_t > *) 0 ;
  
  arg1 = (sttp::Nullable< sttp::float32_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableFloat64__SWIG_0() {
  void * jresult ;
  sttp::Nullable< sttp::float64_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< sttp::float64_t > *)new sttp::Nullable< sttp::float64_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableFloat64__SWIG_1(double jarg1) {
  void * jresult ;
  double *arg1 = 0 ;
  double temp1 ;
  sttp::Nullable< sttp::float64_t > *result = 0 ;
  
  temp1 = (double)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< sttp::float64_t > *)new sttp::Nullable< sttp::float64_t >((double const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableFloat64_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< sttp::float64_t > *arg1 = (sttp::Nullable< sttp::float64_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< sttp::float64_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< sttp::float64_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_NullableFloat64_GetValueOrDefault(void * jarg1) {
  double jresult ;
  sttp::Nullable< sttp::float64_t > *arg1 = (sttp::Nullable< sttp::float64_t > *) 0 ;
  double *result = 0 ;
  
  arg1 = (sttp::Nullable< sttp::float64_t > *)jarg1; 
  {
    try
    {
      result = (double *) &((sttp::Nullable< sttp::float64_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableFloat64(void * jarg1) {
  sttp::Nullable< sttp::float64_t > *arg1 = (sttp::Nullable< sttp::float64_t > *) 0 ;
  
  arg1 = (sttp::Nullable< sttp::float64_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableDecimal__SWIG_0() {
  void * jresult ;
  sttp::Nullable< sttp::decimal_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< sttp::decimal_t > *)new sttp::Nullable< sttp::decimal_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableDecimal__SWIG_1(void * jarg1) {
  void * jresult ;
  sttp::decimal_t *arg1 = 0 ;
  sttp::Nullable< sttp::decimal_t > *result = 0 ;
  
  arg1 = (sttp::decimal_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::decimal_t const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (sttp::Nullable< sttp::decimal_t > *)new sttp::Nullable< sttp::decimal_t >((sttp::decimal_t const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableDecimal_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< sttp::decimal_t > *arg1 = (sttp::Nullable< sttp::decimal_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< sttp::decimal_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< sttp::decimal_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_NullableDecimal_GetValueOrDefault(void * jarg1) {
  void * jresult ;
  sttp::Nullable< sttp::decimal_t > *arg1 = (sttp::Nullable< sttp::decimal_t > *) 0 ;
  sttp::decimal_t *result = 0 ;
  
  arg1 = (sttp::Nullable< sttp::decimal_t > *)jarg1; 
  {
    try
    {
      result = (sttp::decimal_t *) &((sttp::Nullable< sttp::decimal_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableDecimal(void * jarg1) {
  sttp::Nullable< sttp::decimal_t > *arg1 = (sttp::Nullable< sttp::decimal_t > *) 0 ;
  
  arg1 = (sttp::Nullable< sttp::decimal_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableGuid__SWIG_0() {
  void * jresult ;
  sttp::Nullable< sttp::Guid > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< sttp::Guid > *)new sttp::Nullable< sttp::Guid >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableGuid__SWIG_1(void * jarg1) {
  void * jresult ;
  sttp::Guid *arg1 = 0 ;
  sttp::Nullable< sttp::Guid > *result = 0 ;
  
  arg1 = (sttp::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (sttp::Nullable< sttp::Guid > *)new sttp::Nullable< sttp::Guid >((sttp::Guid const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableGuid_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< sttp::Guid > *arg1 = (sttp::Nullable< sttp::Guid > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< sttp::Guid > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< sttp::Guid > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_NullableGuid_GetValueOrDefault(void * jarg1) {
  void * jresult ;
  sttp::Nullable< sttp::Guid > *arg1 = (sttp::Nullable< sttp::Guid > *) 0 ;
  sttp::Guid *result = 0 ;
  
  arg1 = (sttp::Nullable< sttp::Guid > *)jarg1; 
  {
    try
    {
      result = (sttp::Guid *) &((sttp::Nullable< sttp::Guid > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableGuid(void * jarg1) {
  sttp::Nullable< sttp::Guid > *arg1 = (sttp::Nullable< sttp::Guid > *) 0 ;
  
  arg1 = (sttp::Nullable< sttp::Guid > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt8__SWIG_0() {
  void * jresult ;
  sttp::Nullable< int8_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< int8_t > *)new sttp::Nullable< int8_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt8__SWIG_1(signed char jarg1) {
  void * jresult ;
  signed char *arg1 = 0 ;
  signed char temp1 ;
  sttp::Nullable< int8_t > *result = 0 ;
  
  temp1 = (signed char)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< int8_t > *)new sttp::Nullable< int8_t >((signed char const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableInt8_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< int8_t > *arg1 = (sttp::Nullable< int8_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< int8_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< int8_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_sttp_NullableInt8_GetValueOrDefault(void * jarg1) {
  signed char jresult ;
  sttp::Nullable< int8_t > *arg1 = (sttp::Nullable< int8_t > *) 0 ;
  signed char *result = 0 ;
  
  arg1 = (sttp::Nullable< int8_t > *)jarg1; 
  {
    try
    {
      result = (signed char *) &((sttp::Nullable< int8_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableInt8(void * jarg1) {
  sttp::Nullable< int8_t > *arg1 = (sttp::Nullable< int8_t > *) 0 ;
  
  arg1 = (sttp::Nullable< int8_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt16__SWIG_0() {
  void * jresult ;
  sttp::Nullable< int16_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< int16_t > *)new sttp::Nullable< int16_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt16__SWIG_1(short jarg1) {
  void * jresult ;
  short *arg1 = 0 ;
  short temp1 ;
  sttp::Nullable< int16_t > *result = 0 ;
  
  temp1 = (short)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< int16_t > *)new sttp::Nullable< int16_t >((short const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableInt16_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< int16_t > *arg1 = (sttp::Nullable< int16_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< int16_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< int16_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_sttp_NullableInt16_GetValueOrDefault(void * jarg1) {
  short jresult ;
  sttp::Nullable< int16_t > *arg1 = (sttp::Nullable< int16_t > *) 0 ;
  short *result = 0 ;
  
  arg1 = (sttp::Nullable< int16_t > *)jarg1; 
  {
    try
    {
      result = (short *) &((sttp::Nullable< int16_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableInt16(void * jarg1) {
  sttp::Nullable< int16_t > *arg1 = (sttp::Nullable< int16_t > *) 0 ;
  
  arg1 = (sttp::Nullable< int16_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt32__SWIG_0() {
  void * jresult ;
  sttp::Nullable< int32_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< int32_t > *)new sttp::Nullable< int32_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt32__SWIG_1(int jarg1) {
  void * jresult ;
  int *arg1 = 0 ;
  int temp1 ;
  sttp::Nullable< int32_t > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< int32_t > *)new sttp::Nullable< int32_t >((int const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableInt32_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< int32_t > *arg1 = (sttp::Nullable< int32_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< int32_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< int32_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_NullableInt32_GetValueOrDefault(void * jarg1) {
  int jresult ;
  sttp::Nullable< int32_t > *arg1 = (sttp::Nullable< int32_t > *) 0 ;
  int *result = 0 ;
  
  arg1 = (sttp::Nullable< int32_t > *)jarg1; 
  {
    try
    {
      result = (int *) &((sttp::Nullable< int32_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableInt32(void * jarg1) {
  sttp::Nullable< int32_t > *arg1 = (sttp::Nullable< int32_t > *) 0 ;
  
  arg1 = (sttp::Nullable< int32_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt64__SWIG_0() {
  void * jresult ;
  sttp::Nullable< int64_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< int64_t > *)new sttp::Nullable< int64_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableInt64__SWIG_1(long long jarg1) {
  void * jresult ;
  long long *arg1 = 0 ;
  long long temp1 ;
  sttp::Nullable< int64_t > *result = 0 ;
  
  temp1 = (long long)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< int64_t > *)new sttp::Nullable< int64_t >((long long const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableInt64_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< int64_t > *arg1 = (sttp::Nullable< int64_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< int64_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< int64_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_sttp_NullableInt64_GetValueOrDefault(void * jarg1) {
  long long jresult ;
  sttp::Nullable< int64_t > *arg1 = (sttp::Nullable< int64_t > *) 0 ;
  long long *result = 0 ;
  
  arg1 = (sttp::Nullable< int64_t > *)jarg1; 
  {
    try
    {
      result = (long long *) &((sttp::Nullable< int64_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableInt64(void * jarg1) {
  sttp::Nullable< int64_t > *arg1 = (sttp::Nullable< int64_t > *) 0 ;
  
  arg1 = (sttp::Nullable< int64_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt8__SWIG_0() {
  void * jresult ;
  sttp::Nullable< uint8_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< uint8_t > *)new sttp::Nullable< uint8_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt8__SWIG_1(unsigned char jarg1) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  unsigned char temp1 ;
  sttp::Nullable< uint8_t > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< uint8_t > *)new sttp::Nullable< uint8_t >((unsigned char const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableUInt8_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< uint8_t > *arg1 = (sttp::Nullable< uint8_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< uint8_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< uint8_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_sttp_NullableUInt8_GetValueOrDefault(void * jarg1) {
  unsigned char jresult ;
  sttp::Nullable< uint8_t > *arg1 = (sttp::Nullable< uint8_t > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (sttp::Nullable< uint8_t > *)jarg1; 
  {
    try
    {
      result = (unsigned char *) &((sttp::Nullable< uint8_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableUInt8(void * jarg1) {
  sttp::Nullable< uint8_t > *arg1 = (sttp::Nullable< uint8_t > *) 0 ;
  
  arg1 = (sttp::Nullable< uint8_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt16__SWIG_0() {
  void * jresult ;
  sttp::Nullable< uint16_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< uint16_t > *)new sttp::Nullable< uint16_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt16__SWIG_1(unsigned short jarg1) {
  void * jresult ;
  unsigned short *arg1 = 0 ;
  unsigned short temp1 ;
  sttp::Nullable< uint16_t > *result = 0 ;
  
  temp1 = (unsigned short)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< uint16_t > *)new sttp::Nullable< uint16_t >((unsigned short const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableUInt16_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< uint16_t > *arg1 = (sttp::Nullable< uint16_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< uint16_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< uint16_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_NullableUInt16_GetValueOrDefault(void * jarg1) {
  unsigned short jresult ;
  sttp::Nullable< uint16_t > *arg1 = (sttp::Nullable< uint16_t > *) 0 ;
  unsigned short *result = 0 ;
  
  arg1 = (sttp::Nullable< uint16_t > *)jarg1; 
  {
    try
    {
      result = (unsigned short *) &((sttp::Nullable< uint16_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableUInt16(void * jarg1) {
  sttp::Nullable< uint16_t > *arg1 = (sttp::Nullable< uint16_t > *) 0 ;
  
  arg1 = (sttp::Nullable< uint16_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt32__SWIG_0() {
  void * jresult ;
  sttp::Nullable< uint32_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< uint32_t > *)new sttp::Nullable< uint32_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt32__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  unsigned int *arg1 = 0 ;
  unsigned int temp1 ;
  sttp::Nullable< uint32_t > *result = 0 ;
  
  temp1 = (unsigned int)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< uint32_t > *)new sttp::Nullable< uint32_t >((unsigned int const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableUInt32_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< uint32_t > *arg1 = (sttp::Nullable< uint32_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< uint32_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< uint32_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableUInt32_GetValueOrDefault(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< uint32_t > *arg1 = (sttp::Nullable< uint32_t > *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (sttp::Nullable< uint32_t > *)jarg1; 
  {
    try
    {
      result = (unsigned int *) &((sttp::Nullable< uint32_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableUInt32(void * jarg1) {
  sttp::Nullable< uint32_t > *arg1 = (sttp::Nullable< uint32_t > *) 0 ;
  
  arg1 = (sttp::Nullable< uint32_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt64__SWIG_0() {
  void * jresult ;
  sttp::Nullable< uint64_t > *result = 0 ;
  
  {
    try
    {
      result = (sttp::Nullable< uint64_t > *)new sttp::Nullable< uint64_t >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_NullableUInt64__SWIG_1(unsigned long long jarg1) {
  void * jresult ;
  unsigned long long *arg1 = 0 ;
  unsigned long long temp1 ;
  sttp::Nullable< uint64_t > *result = 0 ;
  
  temp1 = (unsigned long long)jarg1; 
  arg1 = &temp1; 
  {
    try
    {
      result = (sttp::Nullable< uint64_t > *)new sttp::Nullable< uint64_t >((unsigned long long const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_NullableUInt64_HasValue(void * jarg1) {
  unsigned int jresult ;
  sttp::Nullable< uint64_t > *arg1 = (sttp::Nullable< uint64_t > *) 0 ;
  bool result;
  
  arg1 = (sttp::Nullable< uint64_t > *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::Nullable< uint64_t > const *)arg1)->HasValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_NullableUInt64_GetValueOrDefault(void * jarg1) {
  unsigned long long jresult ;
  sttp::Nullable< uint64_t > *arg1 = (sttp::Nullable< uint64_t > *) 0 ;
  unsigned long long *result = 0 ;
  
  arg1 = (sttp::Nullable< uint64_t > *)jarg1; 
  {
    try
    {
      result = (unsigned long long *) &((sttp::Nullable< uint64_t > const *)arg1)->GetValueOrDefault();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_NullableUInt64(void * jarg1) {
  sttp::Nullable< uint64_t > *arg1 = (sttp::Nullable< uint64_t > *) 0 ;
  
  arg1 = (sttp::Nullable< uint64_t > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ParseDecimal(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  SwigValueWrapper< sttp::decimal_t > result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = sttp::ParseDecimal((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::decimal_t((const sttp::decimal_t &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_ToString(void * jarg1) {
  char * jresult ;
  sttp::decimal_t *arg1 = 0 ;
  std::string result;
  
  arg1 = (sttp::decimal_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::decimal_t const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = sttp::ToString((sttp::decimal_t const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ParseGuid(unsigned char* jarg1, unsigned int jarg2) {
  void * jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  bool arg2 ;
  SwigValueWrapper< sttp::Guid > result;
  
  arg1 = jarg1;
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      result = sttp::ParseGuid((unsigned char const *)arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Guid((const sttp::Guid &)result); 
  
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_FromTicks(long long jarg1) {
  void * jresult ;
  int64_t arg1 ;
  SwigValueWrapper< sttp::datetime_t > result;
  
  arg1 = (int64_t)jarg1; 
  {
    try
    {
      result = sttp::FromTicks(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::datetime_t((const sttp::datetime_t &)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_sttp_ToTicks(void * jarg1) {
  long long jresult ;
  sttp::datetime_t *arg1 = 0 ;
  int64_t result;
  
  arg1 = (sttp::datetime_t *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::datetime_t const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (int64_t)sttp::ToTicks((sttp::datetime_t const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_Clear(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_Add(void * jarg1, unsigned char jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      (arg1)->push_back((unsigned char const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_ByteBuffer_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  {
    try
    {
      result = ((std::vector< unsigned char > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_ByteBuffer_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  {
    try
    {
      result = ((std::vector< unsigned char > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_ByteBuffer__SWIG_0() {
  void * jresult ;
  std::vector< unsigned char > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_ByteBuffer__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_ByteBuffer__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char > *)new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_sttp_ByteBuffer_getitemcopy(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (unsigned char)std_vector_Sl_unsigned_SS_char_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_sttp_ByteBuffer_getitem(void * jarg1, int jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_setitem(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__setitem(arg1,arg2,(unsigned char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_AddRange(void * jarg1, void * jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char > *arg2 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (std::vector< unsigned char > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_unsigned_SS_char_Sg__AddRange(arg1,(std::vector< unsigned char > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ByteBuffer_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_Insert(void * jarg1, int jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__Insert(arg1,arg2,(unsigned char const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__InsertRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_RemoveAt(void * jarg1, int jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ByteBuffer_Repeat(unsigned char jarg1, int jarg2) {
  void * jresult ;
  unsigned char *arg1 = 0 ;
  int arg2 ;
  unsigned char temp1 ;
  std::vector< unsigned char > *result = 0 ;
  
  temp1 = (unsigned char)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< unsigned char > *)std_vector_Sl_unsigned_SS_char_Sg__Repeat((unsigned char const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_Reverse__SWIG_0(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  {
    try
    {
      std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ByteBuffer_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char > *arg3 = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< unsigned char > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< unsigned char > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_unsigned_SS_char_Sg__SetRange(arg1,arg2,(std::vector< unsigned char > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_ByteBuffer_Contains(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Contains(arg1,(unsigned char const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_ByteBuffer_IndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      result = (int)std_vector_Sl_unsigned_SS_char_Sg__IndexOf(arg1,(unsigned char const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_ByteBuffer_LastIndexOf(void * jarg1, unsigned char jarg2) {
  int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  int result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      result = (int)std_vector_Sl_unsigned_SS_char_Sg__LastIndexOf(arg1,(unsigned char const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_ByteBuffer_Remove(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  bool result;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  temp2 = (unsigned char)jarg2; 
  arg2 = &temp2; 
  {
    try
    {
      result = (bool)std_vector_Sl_unsigned_SS_char_Sg__Remove(arg1,(unsigned char const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_ByteBuffer(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_Clear(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_Add(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->push_back((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_StringCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try
    {
      result = ((std::vector< std::string > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_StringCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try
    {
      result = ((std::vector< std::string > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_StringCollection__SWIG_0() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< std::string > *)new std::vector< std::string >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_StringCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_StringCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_StringCollection_getitemcopy(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_StringCollection_getitem(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_setitem(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_StringCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_Insert(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_StringCollection_Repeat(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try
    {
      std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_StringCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_StringCollection_Contains(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_StringCollection_IndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_StringCollection_LastIndexOf(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_StringCollection_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_StringCollection(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  boost::shared_ptr< sttp::data::DataTable > *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataTable > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::data::DataTable > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::data::DataTable > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_DataTableCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::data::DataTable > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_DataTableCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::data::DataTable > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::data::DataTable > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataTableCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)new std::vector< boost::shared_ptr< sttp::data::DataTable > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataTableCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::data::DataTable > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)new std::vector< boost::shared_ptr< sttp::data::DataTable > >((std::vector< boost::shared_ptr< sttp::data::DataTable > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataTableCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTableCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::data::DataTable > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::data::DataTable >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTableCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::data::DataTable > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::data::DataTable > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::data::DataTable > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataTable > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::data::DataTable > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::data::DataTable > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::data::DataTable > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::data::DataTable > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTableCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::data::DataTable > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataTable > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::data::DataTable > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::data::DataTable > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::data::DataTable > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::data::DataTable > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTableCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::data::DataTable > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::data::DataTable > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::data::DataTable > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Repeat((boost::shared_ptr< sttp::data::DataTable > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTableCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::data::DataTable > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_data_DataTable_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::data::DataTable > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DataTableCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::data::DataTable > > *arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::data::DataTable > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::Measurement > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::transport::Measurement > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::transport::Measurement > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_MeasurementCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::Measurement > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_MeasurementCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::Measurement > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)new std::vector< boost::shared_ptr< sttp::transport::Measurement > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::Measurement > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)new std::vector< boost::shared_ptr< sttp::transport::Measurement > >((std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::transport::Measurement >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::Measurement > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::transport::Measurement > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::Measurement > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::Measurement > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::transport::Measurement > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::Measurement > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::Measurement > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::Measurement > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::transport::Measurement > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::Measurement > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::transport::Measurement > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::Measurement > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Repeat((boost::shared_ptr< sttp::transport::Measurement > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::Measurement > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_Measurement_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::Measurement > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_MeasurementCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::Measurement > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::Measurement > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::transport::MeasurementMetadata > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::transport::MeasurementMetadata > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementMetadataCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)new std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementMetadataCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)new std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >((std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementMetadataCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::transport::MeasurementMetadata >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::MeasurementMetadata > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::transport::MeasurementMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::MeasurementMetadata > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::transport::MeasurementMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::MeasurementMetadata > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Repeat((boost::shared_ptr< sttp::transport::MeasurementMetadata > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadataCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_MeasurementMetadataCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::transport::PhasorMetadata > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::transport::PhasorMetadata > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorMetadataCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)new std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorMetadataCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)new std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >((std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorMetadataCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::transport::PhasorMetadata >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::PhasorMetadata > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::transport::PhasorMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::PhasorMetadata > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::transport::PhasorMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::PhasorMetadata > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Repeat((boost::shared_ptr< sttp::transport::PhasorMetadata > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadataCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorMetadata_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_PhasorMetadataCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorMetadata > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::transport::PhasorReference > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::transport::PhasorReference > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorReferenceCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)new std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorReferenceCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)new std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >((std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorReferenceCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorReference > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::transport::PhasorReference >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::transport::PhasorReference > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::PhasorReference > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::transport::PhasorReference > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::PhasorReference > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::transport::PhasorReference > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::transport::PhasorReference > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::PhasorReference > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::PhasorReference > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Repeat((boost::shared_ptr< sttp::transport::PhasorReference > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReferenceCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_PhasorReference_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_PhasorReferenceCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::PhasorReference > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::transport::DeviceMetadata > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::transport::DeviceMetadata > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DeviceMetadataCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)new std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DeviceMetadataCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)new std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >((std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DeviceMetadataCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::transport::DeviceMetadata >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::DeviceMetadata > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::transport::DeviceMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::DeviceMetadata > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::transport::DeviceMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::DeviceMetadata > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Repeat((boost::shared_ptr< sttp::transport::DeviceMetadata > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadataCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DeviceMetadataCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_Clear(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_Add(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > tempnull2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = jarg2 ? (boost::shared_ptr< sttp::transport::SubscriberConnection > *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->push_back((boost::shared_ptr< sttp::transport::SubscriberConnection > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::size_type result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  {
    try
    {
      result = ((std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const *)arg1)->capacity();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::size_type arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::size_type)jarg2; 
  {
    try
    {
      (arg1)->reserve(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriberConnectionCollection__SWIG_0() {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *result = 0 ;
  
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)new std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriberConnectionCollection__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = 0 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)new std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >((std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriberConnectionCollection__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)new_std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg___SWIG_2(arg1);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > result;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__getitemcopy(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new boost::shared_ptr< sttp::transport::SubscriberConnection >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::value_type *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::value_type *) &std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__getitem(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > >::value_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::SubscriberConnection > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__setitem(arg1,arg2,(boost::shared_ptr< sttp::transport::SubscriberConnection > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_AddRange(void * jarg1, void * jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg2 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__AddRange(arg1,(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *result = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__GetRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > tempnull3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (boost::shared_ptr< sttp::transport::SubscriberConnection > *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Insert(arg1,arg2,(boost::shared_ptr< sttp::transport::SubscriberConnection > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__InsertRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_RemoveAt(void * jarg1, int jarg2) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__RemoveAt(arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__RemoveRange(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *arg1 = 0 ;
  int arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > tempnull1 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *result = 0 ;
  
  arg1 = jarg1 ? (boost::shared_ptr< sttp::transport::SubscriberConnection > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  {
    try
    {
      try {
        result = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Repeat((boost::shared_ptr< sttp::transport::SubscriberConnection > const &)*arg1,arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_Reverse__SWIG_0(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  {
    try
    {
      std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Reverse__SWIG_0(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      } catch(std::invalid_argument &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnectionCollection_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  int arg2 ;
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg3 = 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      try {
        std_vector_Sl_boost_shared_ptr_Sl_sttp_transport_SubscriberConnection_Sg__Sg__SetRange(arg1,arg2,(std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SubscriberConnectionCollection(void * jarg1) {
  std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *) 0 ;
  
  arg1 = (std::vector< boost::shared_ptr< sttp::transport::SubscriberConnection > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DeviceMap__SWIG_0() {
  void * jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  {
    try
    {
      result = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)new std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DeviceMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *result = 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)new std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >((std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_DeviceMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::size_type result;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DeviceMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      result = (bool)((std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > const *)arg1)->empty();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMap_Clear(void * jarg1) {
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMap_getitem(void * jarg1, char * jarg2) {
  void * jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *arg2 = 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      try {
        result = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type *) &std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__getitem(arg1,(std::string const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMap_setitem(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *arg2 = 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type *arg3 = 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type tempnull3 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type *)jarg3 : &tempnull3; 
  {
    try
    {
      std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__setitem(arg1,(std::string const &)*arg2,(boost::shared_ptr< sttp::transport::DeviceMetadata > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DeviceMap_ContainsKey(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__ContainsKey(arg1,(std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMap_Add(void * jarg1, char * jarg2, void * jarg3) {
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *arg2 = 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type *arg3 = 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type tempnull3 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::mapped_type *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Add(arg1,(std::string const &)*arg2,(boost::shared_ptr< sttp::transport::DeviceMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DeviceMap_Remove(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (bool)std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__Remove(arg1,(std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      result = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *)std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__create_iterator_begin(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMap_get_next_key(void * jarg1, void * jarg2) {
  char * jresult ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *arg2 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *)jarg2; 
  {
    try
    {
      result = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > >::key_type *) &std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__get_next_key(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *arg2 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  arg2 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata >,std::less< std::string > >::iterator *)jarg2; 
  {
    try
    {
      std_map_Sl_std_string_Sc_boost_shared_ptr_Sl_sttp_transport_DeviceMetadata_Sg__Sg__destroy_iterator(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DeviceMap(void * jarg1) {
  std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *) 0 ;
  
  arg1 = (std::map< std::string,boost::shared_ptr< sttp::transport::DeviceMetadata > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementMap__SWIG_0() {
  void * jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  {
    try
    {
      result = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)new std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *result = 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)new std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >((std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_sttp_MeasurementMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::size_type result;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      result = ((std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > const *)arg1)->size();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_MeasurementMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  bool result;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      result = (bool)((std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > const *)arg1)->empty();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMap_Clear(void * jarg1) {
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      (arg1)->clear();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMap_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *arg2 = 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type *result = 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      try {
        result = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type *) &std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__getitem(arg1,(sttp::Guid const &)*arg2);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return 0;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMap_setitem(void * jarg1, void * jarg2, void * jarg3) {
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *arg2 = 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type *arg3 = 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type tempnull3 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type *)jarg3 : &tempnull3; 
  {
    try
    {
      std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__setitem(arg1,(sttp::Guid const &)*arg2,(boost::shared_ptr< sttp::transport::MeasurementMetadata > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_MeasurementMap_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (bool)std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__ContainsKey(arg1,(sttp::Guid const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMap_Add(void * jarg1, void * jarg2, void * jarg3) {
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *arg2 = 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type *arg3 = 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type tempnull3 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::mapped_type *)jarg3 : &tempnull3; 
  {
    try
    {
      try {
        std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Add(arg1,(sttp::Guid const &)*arg2,(boost::shared_ptr< sttp::transport::MeasurementMetadata > const &)*arg3);
      } catch(std::out_of_range &_e) {
        SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
        return ;
      }
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_MeasurementMap_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (bool)std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__Remove(arg1,(sttp::Guid const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *result = 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      result = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *)std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__create_iterator_begin(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMap_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *result = 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *)jarg2; 
  {
    try
    {
      result = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > >::key_type *) &std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__get_next_key(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *) 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  arg2 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata >,std::less< sttp::Guid > >::iterator *)jarg2; 
  {
    try
    {
      std_map_Sl_sttp_Guid_Sc_boost_shared_ptr_Sl_sttp_transport_MeasurementMetadata_Sg__Sg__destroy_iterator(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_MeasurementMap(void * jarg1) {
  std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *) 0 ;
  
  arg1 = (std::map< sttp::Guid,boost::shared_ptr< sttp::transport::MeasurementMetadata > > *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataSet() {
  void * jresult ;
  sttp::data::DataSet *result = 0 ;
  
  {
    try
    {
      result = (sttp::data::DataSet *)new sttp::data::DataSet();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::data::DataSet >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DataSet(void * jarg1) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet_Table(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  sttp::data::DataTablePtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (sttp::data::DataTablePtr *) &((sttp::data::DataSet const *)arg1)->Table((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataTablePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet_CreateTable(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  sttp::data::DataTablePtr result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->CreateTable((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataTablePtr(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_DataSet__TableCount(void * jarg1) {
  int jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)((sttp::data::DataSet const *)arg1)->TableCount();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet__TableNames(void * jarg1) {
  void * jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  std::vector< std::string > result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((sttp::data::DataSet const *)arg1)->TableNames();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< std::string >((const std::vector< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet__Tables(void * jarg1) {
  void * jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  std::vector< sttp::data::DataTablePtr > result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((sttp::data::DataSet const *)arg1)->Tables();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< sttp::data::DataTablePtr >((const std::vector< sttp::data::DataTablePtr > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DataSet_AddOrUpdateTable(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  sttp::data::DataTablePtr arg2 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(sttp::data::DataTablePtr *)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->AddOrUpdateTable(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DataSet_RemoveTable(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (bool)(arg1)->RemoveTable((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_ReadXml__SWIG_0(void * jarg1, char * jarg2) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->ReadXml((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_ReadXml__SWIG_1(void * jarg1, void * jarg2) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint8_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->ReadXml((std::vector< uint8_t > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_ReadXml__SWIG_2(void * jarg1, unsigned char* jarg2, unsigned int jarg3) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  boost::shared_ptr< sttp::data::DataSet > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2;
  arg3 = (uint32_t)jarg3; 
  {
    try
    {
      (arg1)->ReadXml((uint8_t const *)arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
  
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_WriteXml__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try
    {
      ((sttp::data::DataSet const *)arg1)->WriteXml((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_WriteXml__SWIG_1(void * jarg1, char * jarg2) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      ((sttp::data::DataSet const *)arg1)->WriteXml((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_WriteXml__SWIG_2(void * jarg1, void * jarg2, char * jarg3) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint8_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try
    {
      ((sttp::data::DataSet const *)arg1)->WriteXml(*arg2,(std::string const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataSet_WriteXml__SWIG_3(void * jarg1, void * jarg2) {
  sttp::data::DataSet *arg1 = (sttp::data::DataSet *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataSet const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataSet > *)jarg1;
  arg1 = (sttp::data::DataSet *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint8_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > & type is null", 0);
    return ;
  } 
  {
    try
    {
      ((sttp::data::DataSet const *)arg1)->WriteXml(*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet_FromXml__SWIG_0(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  sttp::data::DataSetPtr result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = sttp::data::DataSet::FromXml((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataSetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet_FromXml__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< uint8_t > *arg1 = 0 ;
  sttp::data::DataSetPtr result;
  
  arg1 = (std::vector< uint8_t > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = sttp::data::DataSet::FromXml((std::vector< unsigned char > const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataSetPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataSet_FromXml__SWIG_2(unsigned char* jarg1, unsigned int jarg2) {
  void * jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  sttp::data::DataSetPtr result;
  
  arg1 = jarg1;
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      result = sttp::data::DataSet::FromXml((unsigned char const *)arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataSetPtr(result) : 0; 
  
  
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DataSet_XmlSchemaNamespace_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &sttp::data::DataSet::XmlSchemaNamespace;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DataSet_ExtXmlSchemaDataNamespace_get() {
  char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &sttp::data::DataSet::ExtXmlSchemaDataNamespace;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataTable(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataSetPtr arg1 ;
  std::string arg2 ;
  sttp::data::DataTable *result = 0 ;
  
  if (jarg1) arg1 = *(sttp::data::DataSetPtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  {
    try
    {
      result = (sttp::data::DataTable *)new sttp::data::DataTable(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::data::DataTable >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DataTable(void * jarg1) {
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable__Parent(void * jarg1) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  boost::shared_ptr< sttp::data::DataTable const > *smartarg1 = 0 ;
  sttp::data::DataSetPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::data::DataSetPtr *) &((sttp::data::DataTable const *)arg1)->Parent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataSetPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DataTable__Name(void * jarg1) {
  char * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  boost::shared_ptr< sttp::data::DataTable const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::data::DataTable const *)arg1)->Name();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTable_AddColumn(void * jarg1, void * jarg2) {
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  sttp::data::DataColumnPtr arg2 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(sttp::data::DataColumnPtr *)jarg2; 
  {
    try
    {
      (arg1)->AddColumn(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_Column__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataTable const > *smartarg1 = 0 ;
  sttp::data::DataColumnPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (sttp::data::DataColumnPtr *) &((sttp::data::DataTable const *)arg1)->Column((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataColumnPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_Column__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataTable const > *smartarg1 = 0 ;
  sttp::data::DataColumnPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (sttp::data::DataColumnPtr *) &((sttp::data::DataTable const *)arg1)->Column(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataColumnPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_CreateColumn__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  std::string *arg2 = 0 ;
  sttp::data::DataType arg3 ;
  std::string arg4 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  sttp::data::DataColumnPtr result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::data::DataType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  {
    try
    {
      result = (arg1)->CreateColumn((std::string const &)*arg2,arg3,arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataColumnPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_CreateColumn__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  std::string *arg2 = 0 ;
  sttp::data::DataType arg3 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  sttp::data::DataColumnPtr result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::data::DataType)jarg3; 
  {
    try
    {
      result = (arg1)->CreateColumn((std::string const &)*arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataColumnPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_CloneColumn(void * jarg1, void * jarg2) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  sttp::data::DataColumnPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  sttp::data::DataColumnPtr tempnull2 ;
  sttp::data::DataColumnPtr result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::data::DataColumnPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      result = (arg1)->CloneColumn((sttp::data::DataColumnPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataColumnPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_DataTable__ColumnCount(void * jarg1) {
  int jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  boost::shared_ptr< sttp::data::DataTable const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)((sttp::data::DataTable const *)arg1)->ColumnCount();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_Row(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  sttp::data::DataRowPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (sttp::data::DataRowPtr *) &(arg1)->Row(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataRowPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataTable_AddRow(void * jarg1, void * jarg2) {
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  sttp::data::DataRowPtr arg2 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(sttp::data::DataRowPtr *)jarg2; 
  {
    try
    {
      (arg1)->AddRow(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_CreateRow(void * jarg1) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  sttp::data::DataRowPtr result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->CreateRow();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataRowPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataTable_CloneRow(void * jarg1, void * jarg2) {
  void * jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  sttp::data::DataRowPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataTable > *smartarg1 = 0 ;
  sttp::data::DataRowPtr tempnull2 ;
  sttp::data::DataRowPtr result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::data::DataRowPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      result = (arg1)->CloneRow((sttp::data::DataRowPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result ? new sttp::data::DataRowPtr(result) : 0; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_DataTable__RowCount(void * jarg1) {
  int jresult ;
  sttp::data::DataTable *arg1 = (sttp::data::DataTable *) 0 ;
  boost::shared_ptr< sttp::data::DataTable const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataTable > *)jarg1;
  arg1 = (sttp::data::DataTable *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)((sttp::data::DataTable const *)arg1)->RowCount();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataRow(void * jarg1) {
  void * jresult ;
  sttp::data::DataTablePtr arg1 ;
  sttp::data::DataRow *result = 0 ;
  
  if (jarg1) arg1 = *(sttp::data::DataTablePtr *)jarg1; 
  {
    try
    {
      result = (sttp::data::DataRow *)new sttp::data::DataRow(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::data::DataRow >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DataRow(void * jarg1) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow__Parent(void * jarg1) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  boost::shared_ptr< sttp::data::DataRow const > *smartarg1 = 0 ;
  sttp::data::DataTablePtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::data::DataTablePtr *) &((sttp::data::DataRow const *)arg1)->Parent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataTablePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DataRow_IsNull__SWIG_0(void * jarg1, int jarg2) {
  unsigned int jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->IsNull(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DataRow_IsNull__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (bool)(arg1)->IsNull((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetNullValue__SWIG_0(void * jarg1, int jarg2) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetNullValue(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetNullValue__SWIG_1(void * jarg1, char * jarg2) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->SetNullValue((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsString__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< std::string > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsString(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< std::string >((const sttp::Nullable< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsString__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< std::string > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsString((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< std::string >((const sttp::Nullable< std::string > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetStringValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< std::string > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< std::string > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetStringValue(arg2,(sttp::Nullable< std::string > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetStringValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< std::string > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< std::string > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetStringValue((std::string const &)*arg2,(sttp::Nullable< std::string > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsBoolean__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< bool > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsBoolean(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< bool >((const sttp::Nullable< bool > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsBoolean__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< bool > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsBoolean((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< bool >((const sttp::Nullable< bool > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetBooleanValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< bool > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< bool > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetBooleanValue(arg2,(sttp::Nullable< bool > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetBooleanValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< bool > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< bool > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< bool > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetBooleanValue((std::string const &)*arg2,(sttp::Nullable< bool > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsDateTime__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::datetime_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsDateTime(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::datetime_t >((const sttp::Nullable< sttp::datetime_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsDateTime__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::datetime_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsDateTime((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::datetime_t >((const sttp::Nullable< sttp::datetime_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetDateTimeValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< sttp::datetime_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< sttp::datetime_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::datetime_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetDateTimeValue(arg2,(sttp::Nullable< sttp::datetime_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetDateTimeValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< sttp::datetime_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< sttp::datetime_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::datetime_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetDateTimeValue((std::string const &)*arg2,(sttp::Nullable< sttp::datetime_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsSingle__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::float32_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsSingle(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::float32_t >((const sttp::Nullable< sttp::float32_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsSingle__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::float32_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsSingle((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::float32_t >((const sttp::Nullable< sttp::float32_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetSingleValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< sttp::float32_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< sttp::float32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::float32_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetSingleValue(arg2,(sttp::Nullable< sttp::float32_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetSingleValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< sttp::float32_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< sttp::float32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::float32_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetSingleValue((std::string const &)*arg2,(sttp::Nullable< sttp::float32_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsDouble__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::float64_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsDouble(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::float64_t >((const sttp::Nullable< sttp::float64_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsDouble__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::float64_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsDouble((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::float64_t >((const sttp::Nullable< sttp::float64_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetDoubleValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< sttp::float64_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< sttp::float64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::float64_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetDoubleValue(arg2,(sttp::Nullable< sttp::float64_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetDoubleValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< sttp::float64_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< sttp::float64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::float64_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetDoubleValue((std::string const &)*arg2,(sttp::Nullable< sttp::float64_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsDecimal__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::decimal_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsDecimal(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::decimal_t >((const sttp::Nullable< sttp::decimal_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsDecimal__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::decimal_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsDecimal((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::decimal_t >((const sttp::Nullable< sttp::decimal_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetDecimalValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< sttp::decimal_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< sttp::decimal_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::decimal_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetDecimalValue(arg2,(sttp::Nullable< sttp::decimal_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetDecimalValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< sttp::decimal_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< sttp::decimal_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::decimal_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetDecimalValue((std::string const &)*arg2,(sttp::Nullable< sttp::decimal_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsGuid__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::Guid > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsGuid(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::Guid >((const sttp::Nullable< sttp::Guid > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsGuid__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< sttp::Guid > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsGuid((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< sttp::Guid >((const sttp::Nullable< sttp::Guid > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetGuidValue__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< sttp::Guid > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< sttp::Guid > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::Guid > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetGuidValue(arg2,(sttp::Nullable< sttp::Guid > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetGuidValue__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< sttp::Guid > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< sttp::Guid > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< sttp::Guid > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetGuidValue((std::string const &)*arg2,(sttp::Nullable< sttp::Guid > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt8__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int8_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsInt8(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int8_t >((const sttp::Nullable< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt8__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int8_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsInt8((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int8_t >((const sttp::Nullable< int8_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt8Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< int8_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< int8_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt8Value(arg2,(sttp::Nullable< int8_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt8Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< int8_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< int8_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt8Value((std::string const &)*arg2,(sttp::Nullable< int8_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt16__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int16_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsInt16(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int16_t >((const sttp::Nullable< int16_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt16__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int16_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsInt16((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int16_t >((const sttp::Nullable< int16_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt16Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< int16_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< int16_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int16_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt16Value(arg2,(sttp::Nullable< int16_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt16Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< int16_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< int16_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int16_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt16Value((std::string const &)*arg2,(sttp::Nullable< int16_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt32__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int32_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsInt32(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int32_t >((const sttp::Nullable< int32_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt32__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int32_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsInt32((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int32_t >((const sttp::Nullable< int32_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt32Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< int32_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< int32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int32_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt32Value(arg2,(sttp::Nullable< int32_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt32Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< int32_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< int32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int32_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt32Value((std::string const &)*arg2,(sttp::Nullable< int32_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt64__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int64_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsInt64(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int64_t >((const sttp::Nullable< int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsInt64__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< int64_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsInt64((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< int64_t >((const sttp::Nullable< int64_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt64Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< int64_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< int64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int64_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt64Value(arg2,(sttp::Nullable< int64_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetInt64Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< int64_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< int64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< int64_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetInt64Value((std::string const &)*arg2,(sttp::Nullable< int64_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt8__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint8_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsUInt8(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint8_t >((const sttp::Nullable< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt8__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint8_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsUInt8((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint8_t >((const sttp::Nullable< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt8Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< uint8_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< uint8_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt8Value(arg2,(sttp::Nullable< uint8_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt8Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< uint8_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< uint8_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt8Value((std::string const &)*arg2,(sttp::Nullable< uint8_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt16__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint16_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsUInt16(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint16_t >((const sttp::Nullable< uint16_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt16__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint16_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsUInt16((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint16_t >((const sttp::Nullable< uint16_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt16Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< uint16_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< uint16_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint16_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt16Value(arg2,(sttp::Nullable< uint16_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt16Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< uint16_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< uint16_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint16_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt16Value((std::string const &)*arg2,(sttp::Nullable< uint16_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt32__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint32_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsUInt32(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint32_t >((const sttp::Nullable< uint32_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt32__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint32_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsUInt32((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint32_t >((const sttp::Nullable< uint32_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt32Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< uint32_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< uint32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint32_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt32Value(arg2,(sttp::Nullable< uint32_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt32Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< uint32_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< uint32_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint32_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt32Value((std::string const &)*arg2,(sttp::Nullable< uint32_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt64__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint64_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->ValueAsUInt64(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint64_t >((const sttp::Nullable< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataRow_ValueAsUInt64__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  sttp::Nullable< uint64_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = (arg1)->ValueAsUInt64((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Nullable< uint64_t >((const sttp::Nullable< uint64_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt64Value__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  int32_t arg2 ;
  sttp::Nullable< uint64_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  arg3 = (sttp::Nullable< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint64_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt64Value(arg2,(sttp::Nullable< uint64_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DataRow_SetUInt64Value__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  sttp::data::DataRow *arg1 = (sttp::data::DataRow *) 0 ;
  std::string *arg2 = 0 ;
  sttp::Nullable< uint64_t > *arg3 = 0 ;
  boost::shared_ptr< sttp::data::DataRow > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataRow > *)jarg1;
  arg1 = (sttp::data::DataRow *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (sttp::Nullable< uint64_t > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Nullable< uint64_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetUInt64Value((std::string const &)*arg2,(sttp::Nullable< uint64_t > const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataColumn__SWIG_0(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  void * jresult ;
  sttp::data::DataTablePtr arg1 ;
  std::string arg2 ;
  sttp::data::DataType arg3 ;
  std::string arg4 ;
  sttp::data::DataColumn *result = 0 ;
  
  if (jarg1) arg1 = *(sttp::data::DataTablePtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (sttp::data::DataType)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg4)->assign(jarg4); 
  {
    try
    {
      result = (sttp::data::DataColumn *)new sttp::data::DataColumn(arg1,arg2,arg3,arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::data::DataColumn >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DataColumn__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  sttp::data::DataTablePtr arg1 ;
  std::string arg2 ;
  sttp::data::DataType arg3 ;
  sttp::data::DataColumn *result = 0 ;
  
  if (jarg1) arg1 = *(sttp::data::DataTablePtr *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (sttp::data::DataType)jarg3; 
  {
    try
    {
      result = (sttp::data::DataColumn *)new sttp::data::DataColumn(arg1,arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::data::DataColumn >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DataColumn(void * jarg1) {
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DataColumn__Parent(void * jarg1) {
  void * jresult ;
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn const > *smartarg1 = 0 ;
  sttp::data::DataTablePtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::data::DataTablePtr *) &((sttp::data::DataColumn const *)arg1)->Parent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataTablePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DataColumn__Name(void * jarg1) {
  char * jresult ;
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::data::DataColumn const *)arg1)->Name();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_DataColumn__Type(void * jarg1) {
  int jresult ;
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn const > *smartarg1 = 0 ;
  sttp::data::DataType result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::data::DataType)((sttp::data::DataColumn const *)arg1)->Type();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DataColumn__Expression(void * jarg1) {
  char * jresult ;
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::data::DataColumn const *)arg1)->Expression();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_DataColumn__Computed(void * jarg1) {
  unsigned int jresult ;
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::data::DataColumn const *)arg1)->Computed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_DataColumn__Index(void * jarg1) {
  int jresult ;
  sttp::data::DataColumn *arg1 = (sttp::data::DataColumn *) 0 ;
  boost::shared_ptr< sttp::data::DataColumn const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::data::DataColumn > *)jarg1;
  arg1 = (sttp::data::DataColumn *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)((sttp::data::DataColumn const *)arg1)->Index();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_ID_set(void * jarg1, unsigned long long jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  uint64_t arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_Measurement_ID_get(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint64_t) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Source_set(void * jarg1, char * jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Source = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_Measurement_Source_get(void * jarg1) {
  char * jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Source);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_SignalID_set(void * jarg1, void * jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  sttp::Guid *arg2 = (sttp::Guid *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2; 
  if (arg1) (arg1)->SignalID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_Measurement_SignalID_get(void * jarg1) {
  void * jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::Guid *)& ((arg1)->SignalID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Tag_set(void * jarg1, char * jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Tag = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_Measurement_Tag_get(void * jarg1) {
  char * jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Tag);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Value_set(void * jarg1, double jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  sttp::float64_t arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_Measurement_Value_get(void * jarg1) {
  double jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::float64_t) ((arg1)->Value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Adder_set(void * jarg1, double jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  sttp::float64_t arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->Adder = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_Measurement_Adder_get(void * jarg1) {
  double jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::float64_t) ((arg1)->Adder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Multiplier_set(void * jarg1, double jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  sttp::float64_t arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->Multiplier = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_Measurement_Multiplier_get(void * jarg1) {
  double jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::float64_t) ((arg1)->Multiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Timestamp_set(void * jarg1, long long jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  int64_t arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->Timestamp = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_sttp_Measurement_Timestamp_get(void * jarg1) {
  long long jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  int64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int64_t) ((arg1)->Timestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_Measurement_Flags_set(void * jarg1, int jarg2) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  sttp::transport::MeasurementStateFlags arg2 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::transport::MeasurementStateFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_Measurement_Flags_get(void * jarg1) {
  int jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  sttp::transport::MeasurementStateFlags result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementStateFlags) ((arg1)->Flags);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_Measurement() {
  void * jresult ;
  sttp::transport::Measurement *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::Measurement *)new sttp::transport::Measurement();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::Measurement >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_Measurement_AdjustedValue(void * jarg1) {
  double jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement const > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::float64_t)((sttp::transport::Measurement const *)arg1)->AdjustedValue();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_Measurement_GetDateTime(void * jarg1) {
  void * jresult ;
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement const > *smartarg1 = 0 ;
  SwigValueWrapper< sttp::datetime_t > result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = ((sttp::transport::Measurement const *)arg1)->GetDateTime();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::datetime_t((const sttp::datetime_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_Measurement(void * jarg1) {
  sttp::transport::Measurement *arg1 = (sttp::transport::Measurement *) 0 ;
  boost::shared_ptr< sttp::transport::Measurement > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::Measurement > *)jarg1;
  arg1 = (sttp::transport::Measurement *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_GetSignalTypeAcronym__SWIG_0(int jarg1, char jarg2) {
  char * jresult ;
  sttp::transport::SignalKind arg1 ;
  char arg2 ;
  std::string result;
  
  arg1 = (sttp::transport::SignalKind)jarg1; 
  arg2 = (char)jarg2; 
  {
    try
    {
      result = sttp::transport::GetSignalTypeAcronym(arg1,arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_GetSignalTypeAcronym__SWIG_1(int jarg1) {
  char * jresult ;
  sttp::transport::SignalKind arg1 ;
  std::string result;
  
  arg1 = (sttp::transport::SignalKind)jarg1; 
  {
    try
    {
      result = sttp::transport::GetSignalTypeAcronym(arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_GetEngineeringUnits(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = sttp::transport::GetEngineeringUnits((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_GetProtocolType(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = sttp::transport::GetProtocolType((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_ParseSignalKind(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  sttp::transport::SignalKind result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = (sttp::transport::SignalKind)sttp::transport::ParseSignalKind((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SignalReference_SignalID_set(void * jarg1, void * jarg2) {
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  sttp::Guid *arg2 = (sttp::Guid *) 0 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  arg2 = (sttp::Guid *)jarg2; 
  if (arg1) (arg1)->SignalID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SignalReference_SignalID_get(void * jarg1) {
  void * jresult ;
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  sttp::Guid *result = 0 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  result = (sttp::Guid *)& ((arg1)->SignalID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SignalReference_Acronym_set(void * jarg1, char * jarg2) {
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Acronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SignalReference_Acronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  result = (std::string *) & ((arg1)->Acronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SignalReference_Index_set(void * jarg1, unsigned short jarg2) {
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->Index = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_SignalReference_Index_get(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  uint16_t result;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  result = (uint16_t) ((arg1)->Index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SignalReference_Kind_set(void * jarg1, int jarg2) {
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  sttp::transport::SignalKind arg2 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  arg2 = (sttp::transport::SignalKind)jarg2; 
  if (arg1) (arg1)->Kind = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SignalReference_Kind_get(void * jarg1) {
  int jresult ;
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  sttp::transport::SignalKind result;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  result = (sttp::transport::SignalKind) ((arg1)->Kind);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SignalReference__SWIG_0() {
  void * jresult ;
  sttp::transport::SignalReference *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::SignalReference *)new sttp::transport::SignalReference();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SignalReference__SWIG_1(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  sttp::transport::SignalReference *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  {
    try
    {
      result = (sttp::transport::SignalReference *)new sttp::transport::SignalReference((std::string const &)*arg1);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SignalReference(void * jarg1) {
  sttp::transport::SignalReference *arg1 = (sttp::transport::SignalReference *) 0 ;
  
  arg1 = (sttp::transport::SignalReference *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_DeviceAcronym_set(void * jarg1, char * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->DeviceAcronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_DeviceAcronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DeviceAcronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_ID_set(void * jarg1, char * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ID = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_ID_get(void * jarg1) {
  char * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->ID);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_SignalID_set(void * jarg1, void * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  sttp::Guid *arg2 = (sttp::Guid *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2; 
  if (arg1) (arg1)->SignalID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_SignalID_get(void * jarg1) {
  void * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::Guid *)& ((arg1)->SignalID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_PointTag_set(void * jarg1, char * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->PointTag = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_PointTag_get(void * jarg1) {
  char * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->PointTag);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_Reference_set(void * jarg1, void * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  sttp::transport::SignalReference *arg2 = (sttp::transport::SignalReference *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::transport::SignalReference *)jarg2; 
  if (arg1) (arg1)->Reference = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_Reference_get(void * jarg1) {
  void * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  sttp::transport::SignalReference *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::SignalReference *)& ((arg1)->Reference);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_PhasorSourceIndex_set(void * jarg1, unsigned short jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->PhasorSourceIndex = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_MeasurementMetadata_PhasorSourceIndex_get(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  uint16_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint16_t) ((arg1)->PhasorSourceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_Description_set(void * jarg1, char * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Description = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_Description_get(void * jarg1) {
  char * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Description);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_MeasurementMetadata_UpdatedOn_set(void * jarg1, void * jarg2) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  sttp::datetime_t *arg2 = (sttp::datetime_t *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::datetime_t *)jarg2; 
  if (arg1) (arg1)->UpdatedOn = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_MeasurementMetadata_UpdatedOn_get(void * jarg1) {
  void * jresult ;
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  sttp::datetime_t *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::datetime_t *)& ((arg1)->UpdatedOn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_MeasurementMetadata() {
  void * jresult ;
  sttp::transport::MeasurementMetadata *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::MeasurementMetadata *)new sttp::transport::MeasurementMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::MeasurementMetadata >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_MeasurementMetadata(void * jarg1) {
  sttp::transport::MeasurementMetadata *arg1 = (sttp::transport::MeasurementMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::MeasurementMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::MeasurementMetadata > *)jarg1;
  arg1 = (sttp::transport::MeasurementMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadata_DeviceAcronym_set(void * jarg1, char * jarg2) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->DeviceAcronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_PhasorMetadata_DeviceAcronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DeviceAcronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadata_Label_set(void * jarg1, char * jarg2) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Label = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_PhasorMetadata_Label_get(void * jarg1) {
  char * jresult ;
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Label);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadata_Type_set(void * jarg1, char * jarg2) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_PhasorMetadata_Type_get(void * jarg1) {
  char * jresult ;
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadata_Phase_set(void * jarg1, char * jarg2) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Phase = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_PhasorMetadata_Phase_get(void * jarg1) {
  char * jresult ;
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Phase);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadata_SourceIndex_set(void * jarg1, unsigned short jarg2) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->SourceIndex = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_PhasorMetadata_SourceIndex_get(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  uint16_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint16_t) ((arg1)->SourceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorMetadata_UpdatedOn_set(void * jarg1, void * jarg2) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  sttp::datetime_t *arg2 = (sttp::datetime_t *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::datetime_t *)jarg2; 
  if (arg1) (arg1)->UpdatedOn = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorMetadata_UpdatedOn_get(void * jarg1) {
  void * jresult ;
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  sttp::datetime_t *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::datetime_t *)& ((arg1)->UpdatedOn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorMetadata() {
  void * jresult ;
  sttp::transport::PhasorMetadata *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::PhasorMetadata *)new sttp::transport::PhasorMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::PhasorMetadata >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_PhasorMetadata(void * jarg1) {
  sttp::transport::PhasorMetadata *arg1 = (sttp::transport::PhasorMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorMetadata > *)jarg1;
  arg1 = (sttp::transport::PhasorMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReference_Phasor_set(void * jarg1, void * jarg2) {
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  sttp::transport::PhasorMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  sttp::transport::PhasorMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::PhasorMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->Phasor = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReference_Phasor_get(void * jarg1) {
  void * jresult ;
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  sttp::transport::PhasorMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::PhasorMetadataPtr *) & ((arg1)->Phasor);
  jresult = *result ? new sttp::transport::PhasorMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReference_Angle_set(void * jarg1, void * jarg2) {
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  sttp::transport::MeasurementMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::MeasurementMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->Angle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReference_Angle_get(void * jarg1) {
  void * jresult ;
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementMetadataPtr *) & ((arg1)->Angle);
  jresult = *result ? new sttp::transport::MeasurementMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PhasorReference_Magnitude_set(void * jarg1, void * jarg2) {
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  sttp::transport::MeasurementMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::MeasurementMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->Magnitude = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PhasorReference_Magnitude_get(void * jarg1) {
  void * jresult ;
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementMetadataPtr *) & ((arg1)->Magnitude);
  jresult = *result ? new sttp::transport::MeasurementMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PhasorReference() {
  void * jresult ;
  sttp::transport::PhasorReference *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::PhasorReference *)new sttp::transport::PhasorReference();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::PhasorReference >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_PhasorReference(void * jarg1) {
  sttp::transport::PhasorReference *arg1 = (sttp::transport::PhasorReference *) 0 ;
  boost::shared_ptr< sttp::transport::PhasorReference > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PhasorReference > *)jarg1;
  arg1 = (sttp::transport::PhasorReference *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_Acronym_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Acronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_Acronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Acronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_Name_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_Name_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->Name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_UniqueID_set(void * jarg1, void * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  sttp::Guid *arg2 = (sttp::Guid *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2; 
  if (arg1) (arg1)->UniqueID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadata_UniqueID_get(void * jarg1) {
  void * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::Guid *)& ((arg1)->UniqueID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_AccessID_set(void * jarg1, unsigned short jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->AccessID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_DeviceMetadata_AccessID_get(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  uint16_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint16_t) ((arg1)->AccessID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_ParentAcronym_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ParentAcronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_ParentAcronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->ParentAcronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_ProtocolName_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ProtocolName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_ProtocolName_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->ProtocolName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_FramesPerSecond_set(void * jarg1, unsigned short jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->FramesPerSecond = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_DeviceMetadata_FramesPerSecond_get(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  uint16_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (uint16_t) ((arg1)->FramesPerSecond);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_CompanyAcronym_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CompanyAcronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_CompanyAcronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->CompanyAcronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_VendorAcronym_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->VendorAcronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_VendorAcronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->VendorAcronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_VendorDeviceName_set(void * jarg1, char * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->VendorDeviceName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_DeviceMetadata_VendorDeviceName_get(void * jarg1) {
  char * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->VendorDeviceName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_Longitude_set(void * jarg1, double jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  sttp::float64_t arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->Longitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_DeviceMetadata_Longitude_get(void * jarg1) {
  double jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::float64_t) ((arg1)->Longitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_Latitude_set(void * jarg1, double jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  sttp::float64_t arg2 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->Latitude = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_DeviceMetadata_Latitude_get(void * jarg1) {
  double jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::float64_t) ((arg1)->Latitude);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_UpdatedOn_set(void * jarg1, void * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  sttp::datetime_t *arg2 = (sttp::datetime_t *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::datetime_t *)jarg2; 
  if (arg1) (arg1)->UpdatedOn = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadata_UpdatedOn_get(void * jarg1) {
  void * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  sttp::datetime_t *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::datetime_t *)& ((arg1)->UpdatedOn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_Measurements_set(void * jarg1, void * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *arg2 = (std::vector< sttp::transport::MeasurementMetadataPtr > *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::MeasurementMetadataPtr > *)jarg2; 
  if (arg1) (arg1)->Measurements = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadata_Measurements_get(void * jarg1) {
  void * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< sttp::transport::MeasurementMetadataPtr > *)& ((arg1)->Measurements);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_DeviceMetadata_Phasors_set(void * jarg1, void * jarg2) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  std::vector< sttp::transport::PhasorReferencePtr > *arg2 = (std::vector< sttp::transport::PhasorReferencePtr > *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::PhasorReferencePtr > *)jarg2; 
  if (arg1) (arg1)->Phasors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_DeviceMetadata_Phasors_get(void * jarg1) {
  void * jresult ;
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  std::vector< sttp::transport::PhasorReferencePtr > *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< sttp::transport::PhasorReferencePtr > *)& ((arg1)->Phasors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_DeviceMetadata() {
  void * jresult ;
  sttp::transport::DeviceMetadata *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::DeviceMetadata *)new sttp::transport::DeviceMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::DeviceMetadata >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_DeviceMetadata(void * jarg1) {
  sttp::transport::DeviceMetadata *arg1 = (sttp::transport::DeviceMetadata *) 0 ;
  boost::shared_ptr< sttp::transport::DeviceMetadata > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::DeviceMetadata > *)jarg1;
  arg1 = (sttp::transport::DeviceMetadata *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_DeviceAcronym_set(void * jarg1, char * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->DeviceAcronym = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_DeviceAcronym_get(void * jarg1) {
  char * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->DeviceAcronym);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_QualityFlags_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  sttp::transport::MeasurementMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::MeasurementMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->QualityFlags = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_QualityFlags_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementMetadataPtr *) & ((arg1)->QualityFlags);
  jresult = *result ? new sttp::transport::MeasurementMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_StatusFlags_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  sttp::transport::MeasurementMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::MeasurementMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->StatusFlags = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_StatusFlags_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementMetadataPtr *) & ((arg1)->StatusFlags);
  jresult = *result ? new sttp::transport::MeasurementMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Frequency_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  sttp::transport::MeasurementMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::MeasurementMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->Frequency = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Frequency_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementMetadataPtr *) & ((arg1)->Frequency);
  jresult = *result ? new sttp::transport::MeasurementMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_DfDt_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  sttp::transport::MeasurementMetadataPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::MeasurementMetadataPtr *)jarg2 : &tempnull2; 
  if (arg1) (arg1)->DfDt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_DfDt_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (sttp::transport::MeasurementMetadataPtr *) & ((arg1)->DfDt);
  jresult = *result ? new sttp::transport::MeasurementMetadataPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Phasors_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  std::vector< sttp::transport::PhasorReferencePtr > *arg2 = (std::vector< sttp::transport::PhasorReferencePtr > *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::PhasorReferencePtr > *)jarg2; 
  if (arg1) (arg1)->Phasors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Phasors_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  std::vector< sttp::transport::PhasorReferencePtr > *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< sttp::transport::PhasorReferencePtr > *)& ((arg1)->Phasors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Analogs_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *arg2 = (std::vector< sttp::transport::MeasurementMetadataPtr > *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::MeasurementMetadataPtr > *)jarg2; 
  if (arg1) (arg1)->Analogs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Analogs_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< sttp::transport::MeasurementMetadataPtr > *)& ((arg1)->Analogs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Digitals_set(void * jarg1, void * jarg2) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *arg2 = (std::vector< sttp::transport::MeasurementMetadataPtr > *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::MeasurementMetadataPtr > *)jarg2; 
  if (arg1) (arg1)->Digitals = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_ConfigurationFrame_Digitals_get(void * jarg1) {
  void * jresult ;
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< sttp::transport::MeasurementMetadataPtr > *)& ((arg1)->Digitals);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_ConfigurationFrame() {
  void * jresult ;
  sttp::transport::ConfigurationFrame *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::ConfigurationFrame *)new sttp::transport::ConfigurationFrame();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::ConfigurationFrame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_ConfigurationFrame(void * jarg1) {
  sttp::transport::ConfigurationFrame *arg1 = (sttp::transport::ConfigurationFrame *) 0 ;
  boost::shared_ptr< sttp::transport::ConfigurationFrame > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::ConfigurationFrame > *)jarg1;
  arg1 = (sttp::transport::ConfigurationFrame *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_FilterExpression_set(void * jarg1, char * jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->FilterExpression = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriptionInfo_FilterExpression_get(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (std::string *) & ((arg1)->FilterExpression);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_Throttled_set(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Throttled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_Throttled_get(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (bool) ((arg1)->Throttled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_PublishInterval_set(void * jarg1, double jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  sttp::float64_t arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->PublishInterval = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_SubscriptionInfo_PublishInterval_get(void * jarg1) {
  double jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  sttp::float64_t result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (sttp::float64_t) ((arg1)->PublishInterval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_UdpDataChannel_set(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UdpDataChannel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_UdpDataChannel_get(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (bool) ((arg1)->UdpDataChannel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_DataChannelLocalPort_set(void * jarg1, unsigned short jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->DataChannelLocalPort = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_SubscriptionInfo_DataChannelLocalPort_get(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  uint16_t result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (uint16_t) ((arg1)->DataChannelLocalPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_IncludeTime_set(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IncludeTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_IncludeTime_get(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (bool) ((arg1)->IncludeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_LagTime_set(void * jarg1, double jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  sttp::float64_t arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->LagTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_SubscriptionInfo_LagTime_get(void * jarg1) {
  double jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  sttp::float64_t result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (sttp::float64_t) ((arg1)->LagTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_LeadTime_set(void * jarg1, double jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  sttp::float64_t arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = (sttp::float64_t)jarg2; 
  if (arg1) (arg1)->LeadTime = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_SubscriptionInfo_LeadTime_get(void * jarg1) {
  double jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  sttp::float64_t result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (sttp::float64_t) ((arg1)->LeadTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_UseLocalClockAsRealTime_set(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseLocalClockAsRealTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_UseLocalClockAsRealTime_get(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (bool) ((arg1)->UseLocalClockAsRealTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_UseMillisecondResolution_set(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseMillisecondResolution = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_UseMillisecondResolution_get(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (bool) ((arg1)->UseMillisecondResolution);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_RequestNaNValueFilter_set(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RequestNaNValueFilter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_RequestNaNValueFilter_get(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (bool) ((arg1)->RequestNaNValueFilter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_StartTime_set(void * jarg1, char * jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->StartTime = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriptionInfo_StartTime_get(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (std::string *) & ((arg1)->StartTime);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_StopTime_set(void * jarg1, char * jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->StopTime = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriptionInfo_StopTime_get(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (std::string *) & ((arg1)->StopTime);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_ConstraintParameters_set(void * jarg1, char * jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ConstraintParameters = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriptionInfo_ConstraintParameters_get(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (std::string *) & ((arg1)->ConstraintParameters);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_ProcessingInterval_set(void * jarg1, int jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  int32_t arg2 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->ProcessingInterval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SubscriptionInfo_ProcessingInterval_get(void * jarg1) {
  int jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  int32_t result;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (int32_t) ((arg1)->ProcessingInterval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriptionInfo_ExtraConnectionStringParameters_set(void * jarg1, char * jarg2) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ExtraConnectionStringParameters = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriptionInfo_ExtraConnectionStringParameters_get(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  result = (std::string *) & ((arg1)->ExtraConnectionStringParameters);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriptionInfo() {
  void * jresult ;
  sttp::transport::SubscriptionInfo *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::SubscriptionInfo *)new sttp::transport::SubscriptionInfo();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SubscriptionInfo(void * jarg1) {
  sttp::transport::SubscriptionInfo *arg1 = (sttp::transport::SubscriptionInfo *) 0 ;
  
  arg1 = (sttp::transport::SubscriptionInfo *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnector_SetHostname(void * jarg1, char * jarg2) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->SetHostname((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnector_SetPort(void * jarg1, unsigned short jarg2) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  {
    try
    {
      (arg1)->SetPort(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnector_SetMaxRetries(void * jarg1, int jarg2) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  int32_t arg2 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxRetries(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnector_SetRetryInterval(void * jarg1, int jarg2) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  int32_t arg2 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetRetryInterval(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnector_SetMaxRetryInterval(void * jarg1, int jarg2) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  int32_t arg2 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxRetryInterval(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnector_SetAutoReconnect(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  bool arg2 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetAutoReconnect(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetHostname(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  std::string result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = ((sttp::transport::SubscriberConnector const *)arg1)->GetHostname();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetPort(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  uint16_t result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = (uint16_t)((sttp::transport::SubscriberConnector const *)arg1)->GetPort();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetMaxRetries(void * jarg1) {
  int jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  int32_t result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = (int32_t)((sttp::transport::SubscriberConnector const *)arg1)->GetMaxRetries();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetRetryInterval(void * jarg1) {
  int jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  int32_t result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = (int32_t)((sttp::transport::SubscriberConnector const *)arg1)->GetRetryInterval();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetMaxRetryInterval(void * jarg1) {
  int jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  int32_t result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = (int32_t)((sttp::transport::SubscriberConnector const *)arg1)->GetMaxRetryInterval();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetAutoReconnect(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnector const *)arg1)->GetAutoReconnect();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnector_GetConnectionRefused(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  bool result;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnector const *)arg1)->GetConnectionRefused();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriberConnector() {
  void * jresult ;
  sttp::transport::SubscriberConnector *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::SubscriberConnector *)new sttp::transport::SubscriberConnector();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SubscriberConnector(void * jarg1) {
  sttp::transport::SubscriberConnector *arg1 = (sttp::transport::SubscriberConnector *) 0 ;
  
  arg1 = (sttp::transport::SubscriberConnector *)jarg1; 
  {
    try
    {
      delete arg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetupSubscriberConnector(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  sttp::transport::SubscriberConnector *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::transport::SubscriberConnector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::transport::SubscriberConnector & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->SetupSubscriberConnector(*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberInstance_CreateSubscriptionInfo(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriptionInfo result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (arg1)->CreateSubscriptionInfo();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::transport::SubscriptionInfo((const sttp::transport::SubscriptionInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_StatusMessage(void * jarg1, char * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->StatusMessage((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ErrorMessage(void * jarg1, char * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->ErrorMessage((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_DataStartTime(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  SwigValueWrapper< sttp::datetime_t > arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  sttp::datetime_t *argp2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (sttp::datetime_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null sttp::datetime_t", 0);
    return ;
  }
  arg2 = *argp2; 
  {
    try
    {
      (arg1)->DataStartTime(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ReceivedMetadata(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::vector< uint8_t > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< uint8_t > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->ReceivedMetadata((std::vector< uint8_t > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ParsedMetadata(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->ParsedMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ReceivedNewMeasurements(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::vector< sttp::transport::MeasurementPtr > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::MeasurementPtr > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::MeasurementPtr > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->ReceivedNewMeasurements((std::vector< sttp::transport::MeasurementPtr > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ConfigurationChanged(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->ConfigurationChanged();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_HistoricalReadComplete(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->HistoricalReadComplete();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ConnectionEstablished(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->ConnectionEstablished();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ConnectionTerminated(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->ConnectionTerminated();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriberInstance() {
  void * jresult ;
  sttp::transport::SubscriberInstance *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::SubscriberInstance *)new sttp::transport::SubscriberInstance();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::SubscriberInstance >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SubscriberInstance(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberInstance_SubscribeAllExpression_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)sttp::transport::SubscriberInstance::SubscribeAllExpression;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberInstance_SubscribeAllNoStatsExpression_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)sttp::transport::SubscriberInstance::SubscribeAllNoStatsExpression;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberInstance_FilterMetadataStatsExpression_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)sttp::transport::SubscriberInstance::FilterMetadataStatsExpression;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_Initialize__SWIG_0(void * jarg1, char * jarg2, unsigned short jarg3, unsigned short jarg4) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  {
    try
    {
      (arg1)->Initialize((std::string const &)*arg2,arg3,arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_Initialize__SWIG_1(void * jarg1, char * jarg2, unsigned short jarg3) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint16_t)jarg3; 
  {
    try
    {
      (arg1)->Initialize((std::string const &)*arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetSubscriberID(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::Guid *) &((sttp::transport::SubscriberInstance const *)arg1)->GetSubscriberID();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetAutoReconnect(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->GetAutoReconnect();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetAutoReconnect(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetAutoReconnect(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetAutoParseMetadata(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->GetAutoParseMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetAutoParseMetadata(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->SetAutoParseMetadata(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT short SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetMaxRetries(void * jarg1) {
  short jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  int16_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int16_t)((sttp::transport::SubscriberInstance const *)arg1)->GetMaxRetries();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetMaxRetries(void * jarg1, short jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  int16_t arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int16_t)jarg2; 
  {
    try
    {
      (arg1)->SetMaxRetries(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT short SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetRetryInterval(void * jarg1) {
  short jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  int16_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int16_t)((sttp::transport::SubscriberInstance const *)arg1)->GetRetryInterval();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetRetryInterval(void * jarg1, short jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  int16_t arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int16_t)jarg2; 
  {
    try
    {
      (arg1)->SetRetryInterval(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetFilterExpression(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::transport::SubscriberInstance const *)arg1)->GetFilterExpression();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetFilterExpression(void * jarg1, char * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->SetFilterExpression((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetMetadataFilters(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::transport::SubscriberInstance const *)arg1)->GetMetadataFilters();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetMetadataFilters(void * jarg1, char * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->SetMetadataFilters((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_Connect(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Connect();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_ConnectAsync(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->ConnectAsync();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_Disconnect(void * jarg1) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      ((sttp::transport::SubscriberInstance const *)arg1)->Disconnect();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_EstablishHistoricalRead(void * jarg1, char * jarg2, char * jarg3) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  {
    try
    {
      (arg1)->EstablishHistoricalRead((std::string const &)*arg2,(std::string const &)*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetHistoricalReplayInterval(void * jarg1, int jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      ((sttp::transport::SubscriberInstance const *)arg1)->SetHistoricalReplayInterval(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_IsPayloadDataCompressed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->IsPayloadDataCompressed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetPayloadDataCompressed(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::SubscriberInstance const *)arg1)->SetPayloadDataCompressed(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_IsMetadataCompressed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->IsMetadataCompressed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetMetadataCompressed(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::SubscriberInstance const *)arg1)->SetMetadataCompressed(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_IsSignalIndexCacheCompressed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->IsSignalIndexCacheCompressed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_SetSignalIndexCacheCompressed(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::SubscriberInstance const *)arg1)->SetSignalIndexCacheCompressed(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetTotalCommandChannelBytesReceived(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SubscriberInstance const *)arg1)->GetTotalCommandChannelBytesReceived();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetTotalDataChannelBytesReceived(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SubscriberInstance const *)arg1)->GetTotalDataChannelBytesReceived();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetTotalMeasurementsReceived(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SubscriberInstance const *)arg1)->GetTotalMeasurementsReceived();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_IsConnected(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->IsConnected();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_IsSubscribed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberInstance const *)arg1)->IsSubscribed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_TryGetDeviceAcronyms(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->TryGetDeviceAcronyms(*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetParsedDeviceMetadata(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::map< std::string,sttp::transport::DeviceMetadataPtr,std::less< std::string > > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::map< std::string,sttp::transport::DeviceMetadataPtr,std::less< std::string > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,sttp::transport::DeviceMetadataPtr,std::less< std::string > > & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->GetParsedDeviceMetadata(*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberInstance_GetParsedMeasurementMetadata(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::map< sttp::Guid,sttp::transport::MeasurementMetadataPtr,std::less< sttp::Guid > > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::map< sttp::Guid,sttp::transport::MeasurementMetadataPtr,std::less< sttp::Guid > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< sttp::Guid,sttp::transport::MeasurementMetadataPtr,std::less< sttp::Guid > > & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->GetParsedMeasurementMetadata(*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_TryGetDeviceMetadata(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  sttp::transport::DeviceMetadataPtr *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  sttp::transport::DeviceMetadataPtr tempnull3 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? (sttp::transport::DeviceMetadataPtr *)jarg3 : &tempnull3; 
  {
    try
    {
      result = (bool)(arg1)->TryGetDeviceMetadata((std::string const &)*arg2,*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_TryGetMeasurementMetdata(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  sttp::Guid *arg2 = 0 ;
  sttp::transport::MeasurementMetadataPtr *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  sttp::transport::MeasurementMetadataPtr tempnull3 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? (sttp::transport::MeasurementMetadataPtr *)jarg3 : &tempnull3; 
  {
    try
    {
      result = (bool)(arg1)->TryGetMeasurementMetdata((sttp::Guid const &)*arg2,*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_TryGetConfigurationFrame(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  std::string *arg2 = 0 ;
  sttp::transport::ConfigurationFramePtr *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  sttp::transport::ConfigurationFramePtr tempnull3 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? (sttp::transport::ConfigurationFramePtr *)jarg3 : &tempnull3; 
  {
    try
    {
      result = (bool)(arg1)->TryGetConfigurationFrame((std::string const &)*arg2,*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_TryFindTargetConfigurationFrame(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  sttp::transport::SubscriberInstance *arg1 = (sttp::transport::SubscriberInstance *) 0 ;
  sttp::Guid *arg2 = 0 ;
  sttp::transport::ConfigurationFramePtr *arg3 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberInstance > *smartarg1 = 0 ;
  sttp::transport::ConfigurationFramePtr tempnull3 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberInstance > *)jarg1;
  arg1 = (sttp::transport::SubscriberInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? (sttp::transport::ConfigurationFramePtr *)jarg3 : &tempnull3; 
  {
    try
    {
      result = (bool)(arg1)->TryFindTargetConfigurationFrame((sttp::Guid const &)*arg2,*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberInstance_TryGetMeasurementMetdataFromConfigurationFrame(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  sttp::Guid *arg1 = 0 ;
  sttp::transport::ConfigurationFramePtr *arg2 = 0 ;
  sttp::transport::MeasurementMetadataPtr *arg3 = 0 ;
  sttp::transport::ConfigurationFramePtr tempnull2 ;
  sttp::transport::MeasurementMetadataPtr tempnull3 ;
  bool result;
  
  arg1 = (sttp::Guid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? (sttp::transport::ConfigurationFramePtr *)jarg2 : &tempnull2; 
  arg3 = jarg3 ? (sttp::transport::MeasurementMetadataPtr *)jarg3 : &tempnull3; 
  {
    try
    {
      result = (bool)sttp::transport::SubscriberInstance::TryGetMeasurementMetdataFromConfigurationFrame((sttp::Guid const &)*arg1,(boost::shared_ptr< sttp::transport::ConfigurationFrame > const &)*arg2,*arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SignalIndexCache_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (bool)((sttp::transport::SignalIndexCache const *)arg1)->Contains(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SignalIndexCache_GetSignalID(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache const > *smartarg1 = 0 ;
  SwigValueWrapper< sttp::Guid > result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = ((sttp::transport::SignalIndexCache const *)arg1)->GetSignalID(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new sttp::Guid((const sttp::Guid &)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SignalIndexCache_GetSource(void * jarg1, int jarg2) {
  char * jresult ;
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (std::string *) &((sttp::transport::SignalIndexCache const *)arg1)->GetSource(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SignalIndexCache_GetID(void * jarg1, int jarg2) {
  unsigned long long jresult ;
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SignalIndexCache const *)arg1)->GetID(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SignalIndexCache_GetSignalIndex(void * jarg1, void * jarg2) {
  int jresult ;
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  sttp::Guid *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (int32_t)((sttp::transport::SignalIndexCache const *)arg1)->GetSignalIndex((sttp::Guid const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SignalIndexCache_Count(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)((sttp::transport::SignalIndexCache const *)arg1)->Count();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SignalIndexCache() {
  void * jresult ;
  sttp::transport::SignalIndexCache *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::SignalIndexCache *)new sttp::transport::SignalIndexCache();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::SignalIndexCache >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SignalIndexCache(void * jarg1) {
  sttp::transport::SignalIndexCache *arg1 = (sttp::transport::SignalIndexCache *) 0 ;
  boost::shared_ptr< sttp::transport::SignalIndexCache > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SignalIndexCache > *)jarg1;
  arg1 = (sttp::transport::SignalIndexCache *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_SubscriberConnection(void * jarg1, void * jarg2) {
  void * jresult ;
  sttp::transport::DataPublisherPtr arg1 ;
  sttp::IOContext *arg2 = 0 ;
  sttp::transport::SubscriberConnection *result = 0 ;
  
  if (jarg1) arg1 = *(sttp::transport::DataPublisherPtr *)jarg1; 
  arg2 = (sttp::IOContext *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::IOContext & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (sttp::transport::SubscriberConnection *)new sttp::transport::SubscriberConnection(arg1,*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::SubscriberConnection >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_SubscriberConnection(void * jarg1) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetSubscriberID(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::Guid *) &((sttp::transport::SubscriberConnection const *)arg1)->GetSubscriberID();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetInstanceID(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::Guid *) &((sttp::transport::SubscriberConnection const *)arg1)->GetInstanceID();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetConnectionID(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::transport::SubscriberConnection const *)arg1)->GetConnectionID();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetHostName(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::transport::SubscriberConnection const *)arg1)->GetHostName();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetOperationalModes(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)((sttp::transport::SubscriberConnection const *)arg1)->GetOperationalModes();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetEncoding(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)((sttp::transport::SubscriberConnection const *)arg1)->GetEncoding();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetIsTemporalSubscription(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetIsTemporalSubscription();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetStartTimeConstraint(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::datetime_t *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::datetime_t *) &((sttp::transport::SubscriberConnection const *)arg1)->GetStartTimeConstraint();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetStopTimeConstraint(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::datetime_t *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::datetime_t *) &((sttp::transport::SubscriberConnection const *)arg1)->GetStopTimeConstraint();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetProcessingInterval(void * jarg1) {
  int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)((sttp::transport::SubscriberConnection const *)arg1)->GetProcessingInterval();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetUsingPayloadCompression(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetUsingPayloadCompression();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetUsingCompactMeasurementFormat(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetUsingCompactMeasurementFormat();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetIncludeTime(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetIncludeTime();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetUseLocalClockAsRealTime(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetUseLocalClockAsRealTime();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetLagTime(void * jarg1) {
  double jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::float64_t)((sttp::transport::SubscriberConnection const *)arg1)->GetLagTime();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetLeadTime(void * jarg1) {
  double jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::float64_t)((sttp::transport::SubscriberConnection const *)arg1)->GetLeadTime();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetPublishInterval(void * jarg1) {
  double jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::float64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::float64_t)((sttp::transport::SubscriberConnection const *)arg1)->GetPublishInterval();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetUseMillisecondResolution(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetUseMillisecondResolution();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetTrackLatestMeasurements(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetTrackLatestMeasurements();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetIsNaNFiltered(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetIsNaNFiltered();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetIsSubscribed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->GetIsSubscribed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetSubscriptionInfo(void * jarg1) {
  char * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (std::string *) &((sttp::transport::SubscriberConnection const *)arg1)->GetSubscriptionInfo();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetSignalIndexCache(void * jarg1) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  sttp::transport::SignalIndexCachePtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::transport::SignalIndexCachePtr *) &((sttp::transport::SubscriberConnection const *)arg1)->GetSignalIndexCache();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::transport::SignalIndexCachePtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetTotalCommandChannelBytesSent(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SubscriberConnection const *)arg1)->GetTotalCommandChannelBytesSent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetTotalDataChannelBytesSent(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SubscriberConnection const *)arg1)->GetTotalDataChannelBytesSent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_SubscriberConnection_GetTotalMeasurementsSent(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::SubscriberConnection const *)arg1)->GetTotalMeasurementsSent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_CipherKeysDefined(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::SubscriberConnection const *)arg1)->CipherKeysDefined();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_Keys(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  std::vector< uint8_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->Keys(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_SubscriberConnection_IVs(void * jarg1, int jarg2) {
  void * jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  std::vector< uint8_t > result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      result = (arg1)->IVs(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnection_Start__SWIG_0(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->Start(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnection_Start__SWIG_1(void * jarg1) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Start();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnection_Stop__SWIG_0(void * jarg1, unsigned int jarg2) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      (arg1)->Stop(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnection_Stop__SWIG_1(void * jarg1) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Stop();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnection_PublishMeasurements(void * jarg1, void * jarg2) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  std::vector< sttp::transport::MeasurementPtr > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::MeasurementPtr > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::MeasurementPtr > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->PublishMeasurements((std::vector< sttp::transport::MeasurementPtr > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_SubscriberConnection_CancelTemporalSubscription(void * jarg1) {
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->CancelTemporalSubscription();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_SendResponse__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  {
    try
    {
      result = (bool)(arg1)->SendResponse(arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_SendResponse__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, char * jarg4) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  std::string *arg4 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  {
    try
    {
      result = (bool)(arg1)->SendResponse(arg2,arg3,(std::string const &)*arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_SubscriberConnection_SendResponse__SWIG_2(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4) {
  unsigned int jresult ;
  sttp::transport::SubscriberConnection *arg1 = (sttp::transport::SubscriberConnection *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  std::vector< uint8_t > *arg4 = 0 ;
  boost::shared_ptr< sttp::transport::SubscriberConnection > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::SubscriberConnection > *)jarg1;
  arg1 = (sttp::transport::SubscriberConnection *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  arg4 = (std::vector< uint8_t > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (bool)(arg1)->SendResponse(arg2,arg3,(std::vector< uint8_t > const &)*arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_StatusMessage(void * jarg1, char * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->StatusMessage((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_ErrorMessage(void * jarg1, char * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      (arg1)->ErrorMessage((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_ClientConnected(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->ClientConnected((sttp::transport::SubscriberConnectionPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_ClientDisconnected(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->ClientDisconnected((sttp::transport::SubscriberConnectionPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_ProcessingIntervalChangeRequested(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->ProcessingIntervalChangeRequested((sttp::transport::SubscriberConnectionPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_TemporalSubscriptionRequested(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->TemporalSubscriptionRequested((sttp::transport::SubscriberConnectionPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_TemporalSubscriptionCanceled(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      (arg1)->TemporalSubscriptionCanceled((sttp::transport::SubscriberConnectionPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_HandleUserCommand(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  uint32_t arg3 ;
  std::vector< uint8_t > *arg4 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (std::vector< uint8_t > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< uint8_t > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      (arg1)->HandleUserCommand((sttp::transport::SubscriberConnectionPtr const &)*arg2,arg3,(std::vector< uint8_t > const &)*arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_new_PublisherInstance() {
  void * jresult ;
  sttp::transport::PublisherInstance *result = 0 ;
  
  {
    try
    {
      result = (sttp::transport::PublisherInstance *)new sttp::transport::PublisherInstance();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  
  jresult = result ? new boost::shared_ptr<  sttp::transport::PublisherInstance >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_delete_PublisherInstance(void * jarg1) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (void)arg1; delete smartarg1;
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_DefineMetadata__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::vector< sttp::transport::DeviceMetadataPtr > *arg2 = 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *arg3 = 0 ;
  std::vector< sttp::transport::PhasorMetadataPtr > *arg4 = 0 ;
  int32_t arg5 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::DeviceMetadataPtr > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::DeviceMetadataPtr > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< sttp::transport::MeasurementMetadataPtr > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::MeasurementMetadataPtr > const & type is null", 0);
    return ;
  } 
  arg4 = (std::vector< sttp::transport::PhasorMetadataPtr > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::PhasorMetadataPtr > const & type is null", 0);
    return ;
  } 
  arg5 = (int32_t)jarg5; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->DefineMetadata((std::vector< sttp::transport::DeviceMetadataPtr > const &)*arg2,(std::vector< sttp::transport::MeasurementMetadataPtr > const &)*arg3,(std::vector< sttp::transport::PhasorMetadataPtr > const &)*arg4,arg5);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_DefineMetadata__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::vector< sttp::transport::DeviceMetadataPtr > *arg2 = 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > *arg3 = 0 ;
  std::vector< sttp::transport::PhasorMetadataPtr > *arg4 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::DeviceMetadataPtr > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::DeviceMetadataPtr > const & type is null", 0);
    return ;
  } 
  arg3 = (std::vector< sttp::transport::MeasurementMetadataPtr > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::MeasurementMetadataPtr > const & type is null", 0);
    return ;
  } 
  arg4 = (std::vector< sttp::transport::PhasorMetadataPtr > *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::PhasorMetadataPtr > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->DefineMetadata((std::vector< sttp::transport::DeviceMetadataPtr > const &)*arg2,(std::vector< sttp::transport::MeasurementMetadataPtr > const &)*arg3,(std::vector< sttp::transport::PhasorMetadataPtr > const &)*arg4);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_DefineMetadata__SWIG_2(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::data::DataSetPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  sttp::data::DataSetPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::data::DataSetPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->DefineMetadata((sttp::data::DataSetPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PublisherInstance_GetMetadata(void * jarg1) {
  void * jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  sttp::data::DataSetPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::data::DataSetPtr *) &((sttp::transport::PublisherInstance const *)arg1)->GetMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataSetPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PublisherInstance_GetFilteringMetadata(void * jarg1) {
  void * jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  sttp::data::DataSetPtr *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::data::DataSetPtr *) &((sttp::transport::PublisherInstance const *)arg1)->GetFilteringMetadata();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = *result ? new sttp::data::DataSetPtr(*result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PublisherInstance_FilterMetadata(void * jarg1, char * jarg2) {
  void * jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::string *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  std::vector< sttp::transport::MeasurementMetadataPtr > result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  {
    try
    {
      result = ((sttp::transport::PublisherInstance const *)arg1)->FilterMetadata((std::string const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = new std::vector< sttp::transport::MeasurementMetadataPtr >((const std::vector< sttp::transport::MeasurementMetadataPtr > &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_Start__SWIG_0(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  uint16_t arg2 ;
  bool arg3 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint16_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try
    {
      result = (bool)(arg1)->Start(arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_Start__SWIG_1(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  uint16_t arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint16_t)jarg2; 
  {
    try
    {
      result = (bool)(arg1)->Start(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_Start__SWIG_2(void * jarg1, char * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::string *arg2 = 0 ;
  uint16_t arg3 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (uint16_t)jarg3; 
  {
    try
    {
      result = (bool)(arg1)->Start((std::string const &)*arg2,arg3);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_Stop(void * jarg1) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr<  sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      (arg1)->Stop();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_IsStarted(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->IsStarted();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_PublishMeasurements(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::vector< sttp::transport::MeasurementPtr > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::MeasurementPtr > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::MeasurementPtr > const & type is null", 0);
    return ;
  } 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->PublishMeasurements((std::vector< sttp::transport::MeasurementPtr > const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_sttp_PublisherInstance_GetNodeID(void * jarg1) {
  void * jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  sttp::Guid *result = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::Guid *) &((sttp::transport::PublisherInstance const *)arg1)->GetNodeID();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetNodeID(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::Guid *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return ;
  } 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetNodeID((sttp::Guid const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_PublisherInstance_GetSecurityMode(void * jarg1) {
  int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  sttp::transport::SecurityMode result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (sttp::transport::SecurityMode)((sttp::transport::PublisherInstance const *)arg1)->GetSecurityMode();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetSecurityMode(void * jarg1, int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SecurityMode arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::transport::SecurityMode)jarg2; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetSecurityMode(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT int SWIGSTDCALL CSharp_sttp_PublisherInstance_GetMaximumAllowedConnections(void * jarg1) {
  int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  int32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (int32_t)((sttp::transport::PublisherInstance const *)arg1)->GetMaximumAllowedConnections();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetMaximumAllowedConnections(void * jarg1, int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  int32_t arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int32_t)jarg2; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetMaximumAllowedConnections(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_IsMetadataRefreshAllowed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->IsMetadataRefreshAllowed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetMetadataRefreshAllowed(void * jarg1, unsigned int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetMetadataRefreshAllowed(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_IsNaNValueFilterAllowed(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->IsNaNValueFilterAllowed();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetNaNValueFilterAllowed(void * jarg1, unsigned int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetNaNValueFilterAllowed(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_IsNaNValueFilterForced(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->IsNaNValueFilterForced();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetNaNValueFilterForced(void * jarg1, unsigned int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetNaNValueFilterForced(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_GetSupportsTemporalSubscriptions(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->GetSupportsTemporalSubscriptions();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetSupportsTemporalSubscriptions(void * jarg1, unsigned int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  bool arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetSupportsTemporalSubscriptions(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_GetCipherKeyRotationPeriod(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  uint32_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint32_t)((sttp::transport::PublisherInstance const *)arg1)->GetCipherKeyRotationPeriod();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_SetCipherKeyRotationPeriod(void * jarg1, unsigned int jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  uint32_t arg2 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (uint32_t)jarg2; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->SetCipherKeyRotationPeriod(arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_sttp_PublisherInstance_GetPort(void * jarg1) {
  unsigned short jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  uint16_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint16_t)((sttp::transport::PublisherInstance const *)arg1)->GetPort();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_IsIPv6(void * jarg1) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->IsIPv6();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_PublisherInstance_GetTotalCommandChannelBytesSent(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::PublisherInstance const *)arg1)->GetTotalCommandChannelBytesSent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_PublisherInstance_GetTotalDataChannelBytesSent(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::PublisherInstance const *)arg1)->GetTotalDataChannelBytesSent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_sttp_PublisherInstance_GetTotalMeasurementsSent(void * jarg1) {
  unsigned long long jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  uint64_t result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  {
    try
    {
      result = (uint64_t)((sttp::transport::PublisherInstance const *)arg1)->GetTotalMeasurementsSent();
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_sttp_PublisherInstance_TryGetSubscriberConnections(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  std::vector< sttp::transport::SubscriberConnectionPtr > *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  bool result;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (std::vector< sttp::transport::SubscriberConnectionPtr > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< sttp::transport::SubscriberConnectionPtr > & type is null", 0);
    return 0;
  } 
  {
    try
    {
      result = (bool)((sttp::transport::PublisherInstance const *)arg1)->TryGetSubscriberConnections(*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_DisconnectSubscriber__SWIG_0(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::transport::SubscriberConnectionPtr *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  sttp::transport::SubscriberConnectionPtr tempnull2 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? (sttp::transport::SubscriberConnectionPtr *)jarg2 : &tempnull2; 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->DisconnectSubscriber((sttp::transport::SubscriberConnectionPtr const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_sttp_PublisherInstance_DisconnectSubscriber__SWIG_1(void * jarg1, void * jarg2) {
  sttp::transport::PublisherInstance *arg1 = (sttp::transport::PublisherInstance *) 0 ;
  sttp::Guid *arg2 = 0 ;
  boost::shared_ptr< sttp::transport::PublisherInstance const > *smartarg1 = 0 ;
  
  
  smartarg1 = (boost::shared_ptr< const sttp::transport::PublisherInstance > *)jarg1;
  arg1 = (sttp::transport::PublisherInstance *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (sttp::Guid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "sttp::Guid const & type is null", 0);
    return ;
  } 
  {
    try
    {
      ((sttp::transport::PublisherInstance const *)arg1)->DisconnectSubscriber((sttp::Guid const &)*arg2);
    }
    catch (const std::exception& e)
    {
      {
        SWIG_CSharpException(SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


#ifdef __cplusplus
}
#endif

